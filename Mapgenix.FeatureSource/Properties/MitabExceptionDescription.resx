<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ByteOrderError" xml:space="preserve">
    <value>CPLVerifyConfiguration(): byte order set wrong.\n</value>
    <comment>byte order set error</comment>
  </data>
  <data name="CPLCallocException" xml:space="preserve">
    <value>CPLCalloc(): Out of memory allocating {0:d} bytes.\n</value>
    <comment>Exception for CPLCalloc</comment>
  </data>
  <data name="CplConvFile" xml:space="preserve">
    <value>CplConv.cs</value>
    <comment>Record CplConv.cs file</comment>
  </data>
  <data name="CPLCSV" xml:space="preserve">
    <value>CPL_CSV</value>
  </data>
  <data name="CPLDeaccess" xml:space="preserve">
    <value>CPLDeaccess( {0} ) - no match.</value>
  </data>
  <data name="CplDebug" xml:space="preserve">
    <value>CPL_DEBUG</value>
    <comment>CPL Debug</comment>
  </data>
  <data name="CPLDumpSharedListStr" xml:space="preserve">
    <value>{0,2:d} {1} {2,4} {3}</value>
  </data>
  <data name="CplError" xml:space="preserve">
    <value>CPLError</value>
  </data>
  <data name="CPLErrorFileName" xml:space="preserve">
    <value>CPLError.cs</value>
    <comment>CPLError file name</comment>
  </data>
  <data name="CPLErrorLine" xml:space="preserve">
    <value>141</value>
  </data>
  <data name="CplLogErrors" xml:space="preserve">
    <value>CPL_LOG_ERRORS</value>
    <comment>CPL Log is Wrong</comment>
  </data>
  <data name="CPLLogFile" xml:space="preserve">
    <value>CPL_LOG</value>
    <comment>log file</comment>
  </data>
  <data name="CplTimeStamp" xml:space="preserve">
    <value>CPL_TIMESTAMP</value>
    <comment>Define the time stamp</comment>
  </data>
  <data name="CSLLoad" xml:space="preserve">
    <value>CSLLoad({0})</value>
  </data>
  <data name="DirectoryNotFound" xml:space="preserve">
    <value>The specify directory not found</value>
    <comment>directory not found</comment>
  </data>
  <data name="DisastrousError" xml:space="preserve">
    <value>Disastrous error for current program</value>
  </data>
  <data name="EnumerationOutOfRange" xml:space="preserve">
    <value>The value for the enumeration is not on of the valid values.</value>
  </data>
  <data name="EvaluationExpired" xml:space="preserve">
    <value>Evaluation Expired.</value>
  </data>
  <data name="FailedUnlink" xml:space="preserve">
    <value>Failed to unlink {0}.\n</value>
  </data>
  <data name="FeatureSourceIsNotEditable" xml:space="preserve">
    <value>The FeatureSource is not editable.</value>
  </data>
  <data name="FeatureSourceIsNotInTransaction" xml:space="preserve">
    <value>The FeatureSource is not in a transaction.</value>
  </data>
  <data name="FeatureSourceIsNotOpen" xml:space="preserve">
    <value>The FeatureSource is not open.   Please call the Open method before calling this method.</value>
  </data>
  <data name="FileAlreadyExists" xml:space="preserve">
    <value>The file already exists.</value>
  </data>
  <data name="FileIsNotExist" xml:space="preserve">
    <value>The file specified does not exist.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>The specify file not found,check the filename and path please</value>
    <comment>file not found</comment>
  </data>
  <data name="FileSystemObjNoExist" xml:space="preserve">
    <value>It seems no file system object called {0} exists.</value>
  </data>
  <data name="OpenedFileCount" xml:space="preserve">
    <value>{0} Shared files open.</value>
  </data>
  <data name="OutOfMemoryError" xml:space="preserve">
    <value>CPLMalloc(): Out of memory allocating {0} bytes.\n</value>
  </data>
  <data name="OutOfRange" xml:space="preserve">
    <value>the value out of range</value>
  </data>
  <data name="ParameterIsNull" xml:space="preserve">
    <value>The parameter you supplied may not be null.</value>
  </data>
  <data name="ReadFileFailed" xml:space="preserve">
    <value>Read of file {0} failed.</value>
  </data>
  <data name="ReallocFail" xml:space="preserve">
    <value>CPLRealloc(): Out of memory allocating {0} bytes.\n</value>
    <comment>ReAllocated Failed</comment>
  </data>
  <data name="SillySize" xml:space="preserve">
    <value>CPLMalloc({0}): Silly size requested.\n</value>
    <comment>Get the malloc sillysize</comment>
  </data>
  <data name="StrFormat" xml:space="preserve">
    <value>{0}</value>
    <comment>String output format</comment>
  </data>
  <data name="String" xml:space="preserve">
    <value>MitabExceptionDescription</value>
  </data>
  <data name="SystemError" xml:space="preserve">
    <value>The client system is not Win32 system</value>
    <comment>Client isn't Win32</comment>
  </data>
  <data name="SystemName" xml:space="preserve">
    <value>Win32</value>
    <comment>Current System Name</comment>
  </data>
  <data name="TabFileNameIsInvalid" xml:space="preserve">
    <value>The tab file name is invalid.</value>
  </data>
  <data name="ThreadSlotError" xml:space="preserve">
    <value>Thread Local Store Slot fulled or it over limited</value>
    <comment>TLS Error Info</comment>
  </data>
  <data name="UnableFindFile" xml:space="preserve">
    <value>Unable to find file handle {0} in CPLCloseShared().</value>
  </data>
  <data name="UnlinkFailed" xml:space="preserve">
    <value>Failed to unlink {0}.\nUnrecognised filesystem object.</value>
  </data>
  <data name="VarSizeError" xml:space="preserve">
    <value>sizeof(GInt32) == {0:d} ... yow!\n</value>
    <comment>Variables size error</comment>
  </data>
  <data name="VSIDebug3VSIOpen" xml:space="preserve">
    <value>VSIFOpen({0},{1}) = {2}</value>
  </data>
  <data name="VSIFRead" xml:space="preserve">
    <value>VSIFRead({0},{1}) = {2}</value>
  </data>
  <data name="VSIFTell" xml:space="preserve">
    <value>VSIFTell({0}) = {1}d</value>
  </data>
  <data name="VSIRewind" xml:space="preserve">
    <value>VSIRewind({0})</value>
  </data>
  <data name="EnumerationOutOfRange1" xml:space="preserve">
    <value>The value for the enumeration is not on of the valid values.</value>
  </data>
  <data name="EvaluationExpired1" xml:space="preserve">
    <value>Evaluation Expired.</value>
  </data>
  <data name="FeatureSourceIsNotEditable1" xml:space="preserve">
    <value>The FeatureSource is not editable.</value>
  </data>
  <data name="FeatureSourceIsNotInTransaction1" xml:space="preserve">
    <value>The FeatureSource is not in a transaction.</value>
  </data>
  <data name="FeatureSourceIsNotOpen1" xml:space="preserve">
    <value>The FeatureSource is not open.   Please call the Open method before calling this method.</value>
  </data>
  <data name="FileAlreadyExists1" xml:space="preserve">
    <value>The file already exists.</value>
  </data>
  <data name="FileIsNotExist1" xml:space="preserve">
    <value>The file specified does not exist.</value>
  </data>
  <data name="ParameterIsNull1" xml:space="preserve">
    <value>The parameter you supplied may not be null.</value>
  </data>
  <data name="TabFileNameIsInvalid1" xml:space="preserve">
    <value>The tab file name is invalid.</value>
  </data>
  <data name="TabFileHandleIsNull" xml:space="preserve">
    <value>Please open the tab file before getting the projection information.</value>
  </data>
</root>