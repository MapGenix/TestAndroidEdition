<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mapgenix.FeatureSource</name>
    </assembly>
    <members>
        <member name="T:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource">
            <summary>FeatureSource for ArcGIS Rest API </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource._columns">
            <summary>
            Features columns
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource._featuresLoaded">
            <summary>
            Indicates when features are loaded
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource._inMemoryFeatures">
            <summary>
            Features load from wfs GetFeature request
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource._webProxy">
            <summary>
            HTTP proxy for ArcGIS resquest
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource._marpServiceURL">
            <summary>
            Map service URL
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource._layerId">
            <summary>
            Layer Id for rest request
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource._geometryType">
            <summary>
            ESRI Geometry type 
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource._columnId">
            <summary>
            Feature column id
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.Columns">
            <summary>
            Feature columns
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.ColumnsNames">
            <summary>
            Get feature columns names
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.WebProxy">
            <summary>
            HTTP proxy for ArcGIS resquest
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.MapServiceURL">
            <summary>
            Map service URL
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.LayerId">
            <summary>
            Layer Id for rest request
            </summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.OpenCore">
            <summary>
            Call rest service and load all features
            </summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.LoadEsriGeoJSON">
            <summary>
            Load columns and features from ESRIGeoJson
            </summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.LoadFeaturesId(Mapgenix.FeatureSource.ArcGISServerRESTLayerExtent)">
            <summary>
            POST request for load features id by full layer extent
            </summary>
            <param name="extent">ArcGIS layer extent extent</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.LoadFeaturesInfo(System.Collections.Generic.List{System.Int32})">
            <summary>
            POST request for load all features info by features id
            </summary>
            <param name="featuresIds"></param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.GetWKTPoint(Mapgenix.FeatureSource.ArcGISServerRESTGeometry)">
            <summary>
            Get point wkt from EsriGeometry object
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.GetWKTMultiPoint(Mapgenix.FeatureSource.ArcGISServerRESTGeometry)">
            <summary>
            Get multipoint wkt from EsriGeometry object
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.GetWKTPolyLine(Mapgenix.FeatureSource.ArcGISServerRESTGeometry)">
            <summary>
            Get polyline wkt from EsriGeometry object
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.ArcGISServerRESTFeatureSource.GetWKTPolygon(Mapgenix.FeatureSource.ArcGISServerRESTGeometry)">
            <summary>
            Get polygon wkt from EsriGeometry object
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="T:Mapgenix.FeatureSource.ArcGISServerRESTFeature">
            <summary>
            JSON entity for ArcGIS Server REST Feature object                                    
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ArcGISServerRESTGeometry">
            <summary>
            JSON entity for ArcGIS Server REST Geometry object
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ArcGISServerRESTLayerExtent">
            <summary>
            JSON entity for ArcGIS Server REST LayerExtent object
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ArcGISServerRESTFeaturesId">
            <summary>
            JSON entity for ArcGIS Server REST FeaturesId object
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ArcGISServerRESTLayerFeatures">
            <summary>
            JSON entity for ArcGIS Server REST layerFeatures Object
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ArcGISServerRESTLayerField">
            <summary>
            JSON entity for ArcGIS Server REST layerField object
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ArcGISServerRESTLayerInfo">
            <summary>
            JSON entity for ArcGIS Server REST LayerInfo object
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ColumnFetchEventArgs">
            <summary>Event parameters passed in through the CustomFieldFetch event.</summary>
            <remarks>
            CustomColumnFetch Event Background<br/>
            	<br/>
            Used primarily when you have data relating to a particular feature or set of
            features that is not within source of the data.For example, for a shapefile
            you may want to link to an outside SQL Server table.<br/>
            	<br/>
            To integrate this SQL data, you simply create a column name that does not exist in the
            .dbf file of the shapefile.  Whenever GSuite is queried to return records that specifically require
            this column (field), the FeatureSource raises the event to supply the data. This way the SQL table is queried and the
            data is stored in a collection.<br/>
            	<br/>
            Being an event, it gets raised for each feature meaning the event can be raised a lot of times.
            That is why we recommend caching the data.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.ColumnFetchEventArgs.#ctor(System.String,System.String)">
            <summary>To create the event arguments.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="columnName">Column name.</param>
            <param name="id">Id of the feature.</param>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "P:Mapgenix.FeatureSource.ColumnFetchEventArgs.ColumnName" -->
        <member name="P:Mapgenix.FeatureSource.ColumnFetchEventArgs.Id">
            <summary>Returns the Id needed to return data.</summary>
            <returns>Id needed to return data.</returns>
            <remarks>Look up the Id in your external data source and find the field of data.<br/>
            	<br/>
            CustomColumnFetch Event Background<br/>
            	<br/>
            Used primarily when you have data relating to a particular feature or set of
            features that is not within source of the data.For example, for a shapefile
            you may want to link to an outside SQL Server table.<br/>
            	<br/>
            To integrate this SQL data, you simply create a column name that does not exist in the
            .dbf file of the shapefile.  Whenever GSuite is queried to return records that specifically require
            this column (field), the FeatureSource raises the event to supply the data. This way the SQL table is queried and the
            data is stored in a collection.<br/>
            	<br/>
            Being an event, it gets raised for each feature meaning the event can be raised a lot of times.
            That is why we recommend caching the data.
            </remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.ColumnFetchEventArgs.ColumnValue">
            <summary>Returns the field's value. To be set in the event.</summary>
            <returns>Field's value. To be set in the event.</returns>
            <remarks>CustomColumnFetch Event Background<br/>
            	<br/>
            Used primarily when you have data relating to a particular feature or set of
            features that is not within source of the data.For example, for a shapefile
            you may want to link to an outside SQL Server table.<br/>
            	<br/>
            To integrate this SQL data, you simply create a column name that does not exist in the
            .dbf file of the shapefile.  Whenever GSuite is queried to return records that specifically require
            this column (field), the FeatureSource raises the event to supply the data. This way the SQL table is queried and the
            data is stored in a collection.<br/>
            	<br/>
            Being an event, it gets raised for each feature meaning the event can be raised a lot of times.
            That is why we recommend caching the data.
            </remarks>
        </member>
        <member name="T:Mapgenix.FeatureSource.CommitTransactionEventArgs">
            <summary>Event arguments passed in through the CommittedTransaction and CommittingTransaction events.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.CommitTransactionEventArgs.#ctor(Mapgenix.FeatureSource.TransactionBuffer)">
            <summary>Constructor of the event arguments.</summary>
            <overloads>Passes in a transaction buffer.</overloads>
            <returns>None</returns>
            <param name="transactionBuffer">Transaction buffer that has been committed.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.CommitTransactionEventArgs.#ctor">
            <summary>Constructor of the event arguments.</summary>
            <overloads>Default constructor.</overloads>
            <returns>None</returns>
            <remarks>None</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.CommitTransactionEventArgs.TransactionBuffer">
            <summary>Returns the transaction buffer that has been committed.</summary>
            <decimalDegreesValue>Transaction buffer that has been committed.</decimalDegreesValue>
            <remarks>None</remarks>
        </member>
        <member name="T:Mapgenix.FeatureSource.TransactionBuffer">
            <summary>Holding place for transactions that have not yet been committed.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.#ctor">
            <summary>Class constructor.</summary>
            <overloads>Default constructor.</overloads>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.#ctor(System.Collections.Generic.Dictionary{System.String,Mapgenix.Shapes.Feature},System.Collections.ObjectModel.Collection{System.String},System.Collections.Generic.Dictionary{System.String,Mapgenix.Shapes.Feature})">
            <summary>Class constructor.</summary>
            <overloads>Constructor passing in the necessary properties in the class.</overloads>
            <returns>None</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.Clear">
            <summary>Clears all the items in AddBuffer, EditBuffer and DeleteBuffer.</summary>
            <returns>None.</returns>
        </member>
        <member name="P:Mapgenix.FeatureSource.TransactionBuffer.AddBuffer">
            <summary>Gets the dictionary buffer with the features to be added.</summary>
            <returns>dictionary buffer with the features to be added.</returns>
            <remarks>It is recommended that use this dictionary for reviewing and not for adding new items. </remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.TransactionBuffer.DeleteBuffer">
            <summary>Gets the dictionary buffer with the features to be deleted.</summary>
            <returns>Dictionary buffer with the features to be deleted.</returns>
            <remarks>It is recommended that use this dictionary for reviewing and not for adding new items. </remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.TransactionBuffer.EditBuffer">
            <summary>Gets the dictionary buffer with the features to be updated.</summary>
            <returns>Dictionary buffer with the features to be updated.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.AddFeature(Mapgenix.Shapes.Feature)">
            <summary>Adds a feature to the transaction buffer.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="feature">Feature to add to the transaction buffer.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.AddFeature(Mapgenix.Shapes.BaseShape)">
            <summary>Adds a shape to the transaction buffer.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="baseShape">Shape to add to the transaction buffer. </param>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.AddFeature(Mapgenix.Shapes.BaseShape,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Adds a shape to the transaction buffer.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="baseShape">Shape to add to the transaction buffer. </param>
            <param name="columnValues">Column values to add.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.DeleteFeature(System.String)">
            <summary>Adds a placeholder to represent a Feature to be deleted.</summary>
            <returns>None</returns>
            <remarks>Does not remove a feature from the TransactionBuffer immediately. Instead it adds it "to
            be deleted list". When the TransactionBuffer is processed we know what records need to be deleted.</remarks>
            <param name="featureId">Unique Id for the specific Feature to delete.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.EditFeature(Mapgenix.Shapes.Feature)">
            <summary>Adds a Feature to be edited.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="feature">Feature to be edited.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.EditFeature(Mapgenix.Shapes.BaseShape)">
            <summary>Adds a shape to be edited.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="baseShape">Shape to be edited. 
            The shape ID needs to be the same as the feature ID.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionBuffer.EditFeature(Mapgenix.Shapes.BaseShape,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Adds a shape to be edited.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="baseShape">Shape to be edited. 
            The shape ID needs to be the same as the feature ID.</param>
            <param name="columnValues">Column values to be updated. 
            The shape ID should be the same as the feature you are going to update.</param>
        </member>
        <member name="T:Mapgenix.FeatureSource.FeatureSourceFactory">
            <summary>
            Factory for creating FeatureSource
            </summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.FeatureSourceFactory.CreateArcGISRestFeatureSource(System.String,System.String)">
            <summary>
            Create ArcGISRestFeatureSource element
            </summary>
            <param name="mapServerUrl">ArcGIS map server url example: http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/ </param>
            <param name="layerId">Map server layer ID</param>
            <returns>ArcGISServerRESTFeatureSource</returns>
        </member>
        <member name="T:Mapgenix.FeatureSource.DbfColumn">
            <summary>Column information specific to a DBF column.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.DbfColumn.#ctor">
            <summary>Constructor of DbfColumn.</summary>
            <overloads>Default constructor.</overloads>
            <returns>None</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.DbfColumn.#ctor(System.String,Mapgenix.FeatureSource.DbfColumnType,System.Int32,System.Int32)">
            <summary>Constructor of DbfColumn.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="columnName">Name of the column in the DBF.</param>
            <param name="columnType">Type of the column in the DBF.</param>
            <param name="length">Length of the column in the DBF.</param>
            <param name="decimalLength">Number of decimal places of the column if numeric type.</param>
        </member>
        <member name="P:Mapgenix.FeatureSource.DbfColumn.ColumnName">
            <summary>Returns the name of the column in the DBF.</summary>
            <returns>Name of the column in the DBF.</returns>
            <remarks>None</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.DbfColumn.ColumnType">
            <summary>Returns the type of the column in the DBF.</summary>
            <returns>Type of the column in the DBF.</returns>
            <remarks>None</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.DbfColumn.Length">
            <summary>Returns the length of the column in the DBF.</summary>
            <returns>Length of the column in the DBF.</returns>
            <remarks>None</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.DbfColumn.DecimalLength">
            <summary>Returns the decimal length of the column in the DBF.</summary>
            <decimalDegreesValue>Decimal length of the column in the DBF.</decimalDegreesValue>
            <remarks>Number of decimal places the number represents if column type is numeric.</remarks>
        </member>
        <member name="T:Mapgenix.FeatureSource.DbfReadWriteMode">
            <summary>Dbf read write modes</summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.FeatureSourceColumn">
            <summary>Column contained within a FeatureSource.</summary>
            <remarks>A FeatureSource is represented by a collection of features with their column data.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.FeatureSourceColumn.#ctor">
            <summary>Constructor to create a FeatureSourceColumn.</summary>
            <overloads>Creates a FeatureSourceColumn that is empty.</overloads>
            <returns>None</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.FeatureSourceColumn.#ctor(System.String)">
            <summary>Constructor to create a FeatureSourceColumn.</summary>
            <overloads>Creates a FeatureSourceColumn with the column's name only.</overloads>
            <returns>None</returns>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.FeatureSourceColumn.#ctor(System.String,System.String,System.Int32)">
            <summary>Constructor to create a FeatureSourceColumn.</summary>
            <overloads>Creates a FeatureSourceColumn with the column's name, type and max length.</overloads>
            <returns>None</returns>
            <param name="columnName">Name of the column.</param>
            <param name="typeName">Type name of the column.</param>
            <param name="maxLength">Maximum length of the column.</param>
        </member>
        <member name="P:Mapgenix.FeatureSource.FeatureSourceColumn.ColumnName">
            <summary>Returns the name of the column.</summary>
            <decimalDegreesValue>Name of the column.</decimalDegreesValue>
            <remarks>None</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.FeatureSourceColumn.TypeName">
            <summary>Returns the type name of the column.</summary>
            <returns>Type name of the column.</returns>
        </member>
        <member name="P:Mapgenix.FeatureSource.FeatureSourceColumn.MaxLength">
            <summary>Returns the maximum length of the column.</summary>
            <decimalDegreesValue>Maximum length of the column.</decimalDegreesValue>
        </member>
        <member name="M:Mapgenix.FeatureSource.FeatureSourceColumn.ToString">
            <summary>Returns column name of FeatureSourceColumn</summary>
            <returns>Column name of FeatureSourceColumn</returns>
        </member>
        <member name="T:Mapgenix.FeatureSource.ShapeFileFeatureSourceHelper">
            <summary>Static class for operations on ESRI shapefiles.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSourceHelper.BuildIndexFile(System.String,Mapgenix.FeatureSource.BuildIndexMode)">
            <summary>Builds a spatial index to increase access speed.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSourceHelper.BuildIndexFile(System.String,System.String,Mapgenix.Canvas.BaseProjection,System.String,System.String,Mapgenix.FeatureSource.BuildIndexMode)">
            <summary>Builds a spatial index to increase access speed.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSourceHelper.BuildIndexFile(System.String,System.String,Mapgenix.Canvas.BaseProjection,System.String,System.String,Mapgenix.FeatureSource.BuildIndexMode,System.Text.Encoding)">
            <summary>Builds a spatial index to increase access speed.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSourceHelper.CreateShapeFile(Mapgenix.FeatureSource.ShapeFileType,System.String,System.Collections.Generic.IEnumerable{Mapgenix.FeatureSource.DbfColumn},System.Text.Encoding,Mapgenix.FeatureSource.OverwriteMode)">
            <summary>Creates a new shapefile.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSourceHelper.CloneShapeFileStructure(System.String,System.String,Mapgenix.FeatureSource.OverwriteMode)">
            <summary>Clones the structure from a source shape file to a target shape file. 
            The targetShapeFile has the same type and dbf columns as the source shapefile but without any records.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSourceHelper.CloneShapeFileStructure(System.String,System.String,Mapgenix.FeatureSource.OverwriteMode,System.Text.Encoding)">
            <summary>Clones the structure from a source shape file to a target shape file. 
            The targetShapeFile has the same type and dbf columns as the source shapefile but without any records.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSourceHelper.SaveToProjection(System.String,System.String,Mapgenix.Canvas.Proj4Projection,Mapgenix.FeatureSource.OverwriteMode)">
            <summary>Projects features in a shapefile into another projection and saves to a new shapefile.</summary>
            <param name="sourceShapeFile">Source shapefile to project.</param>
            <param name="targetShapeFile">Target shapefile to be saved for the projected features. </param>
            <param name="projection">Projection. The source shapefile is in the FromProjection of the Projection parameter, 
            and the target shapeFile is in the ToProjection of the Projection.</param>
            <param name="overwriteMode">Override mode when the target shapefile already exists.</param>
        </member>
        <member name="E:Mapgenix.FeatureSource.ShapeFileFeatureSourceHelper.BuildingIndex">
            <summary>Fired each time the index of a record is built using RTree index.
            Usefull to build a progress bar.</summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.EditTools">
            <summary>Wrapper class for FeatureLayer for the editing methods.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.#ctor(Mapgenix.FeatureSource.BaseFeatureSource)">
            <summary>Constructor for the class.</summary>
            <overloads>Passes in the FeatureSource.</overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="featureSource">FeatureSource for the edit operations.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.BeginTransaction">
            <summary>Starts a new transaction for the FeatureSource.</summary>
            <returns>None</returns>
            <remarks>Used to start a transaction. There are prerequisites before beginning a transaction, such as transaction not already in progress, 
            FeatureSource is open.<br/><br/>
            The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/></remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.Add(Mapgenix.Shapes.Feature)">
            <summary>Adds a new Feature to an existing transaction.</summary>
            <returns>ID uniquely identifying the Feature while in transaction.</returns>
             <overloads>Passes in a Feature.</overloads>
             <param name="feature">Feature to add to the transaction.</param>
             <remarks>
             The Transaction System<br/>
             	<br/>
             The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
             First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
             Call RollbackTransaction to revert before BeginTransaction.
             To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
             the logic of committting specific to a source.
             By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
             that are in the temporary editing buffer will not be reflected.<br/>
             	<br/>
             In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
             performed during a transaction are live.<br/>
             	<br/>
             As an example, a FeatureLayer has 20 records.
             Next, a transaction begins and then GetAllFeatures is called. The result is 20
             records. Delete one of the records and call the GetAllFeatures
             again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
             <br/></remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.Add(Mapgenix.Shapes.BaseShape)">
            <summary>Adds a new Feature with a shape to an existing transaction.</summary>
            <returns>ID uniquely identifying the Feature while in transaction.</returns>
             <overloads>Passes in a shape.</overloads>
             <param name="shape">Shape to add to the transaction.</param>
             <remarks>
             The Transaction System<br/>
             	<br/>
             The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
             First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
             Call RollbackTransaction to revert before BeginTransaction.
             To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
             the logic of committting specific to a source.
             By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
             that are in the temporary editing buffer will not be reflected.<br/>
             	<br/>
             In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
             performed during a transaction are live.<br/>
             	<br/>
             As an example, a FeatureLayer has 20 records.
             Next, a transaction begins and then GetAllFeatures is called. The result is 20
             records. Delete one of the records and call the GetAllFeatures
             again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
             <br/></remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.Add(Mapgenix.Shapes.BaseShape,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Adds a Feature with shape and column values.</summary>
            <remarks>
            The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/></remarks>
            <param name="shape">Shape to be added to the transaction.</param>
            <param name="columnValues">DBF information of the shape.</param>
            <returns>ID uniquely identifying the shape while it is in a transaction.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.ScaleUp(System.String,System.Double)">
            <summary>Increases the size of the feature by a percentage.</summary>
            <remarks>To easily edit features directly in the FeatureSource without having to retrieve them, convert them to a shape,
            manipulate them and put them back into the FeatureSource.<br/>
            </remarks>
            <param name="featureId">Id of the Feature to scale.</param>
            <param name="percentage">Percentage by which to increase the Feature size.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.ScaleDown(System.String,System.Double)">
            <summary>Decreases the size of the feature by a percentage.</summary>
            <remarks>To easily edit features directly in the FeatureSource without having to retrieve them, convert them to a shape,
            manipulate them and put them back into the FeatureSource.<br/>
            </remarks>
            <param name="featureId">Id of the Feature to scale.</param>
            <param name="percentage">Percentage to decrease the Feature size.</param>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Mapgenix.FeatureSource.EditTools.TranslateByOffset(System.String,System.Double,System.Double,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit)" -->
        <member name="M:Mapgenix.FeatureSource.EditTools.TranslateByDegree(System.String,System.Double,System.Double,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit)">
            <summary>Moves the Feature from one location to another based on a distance and a direction in degrees.</summary>
            <returns>None</returns>
            <param name="featureId">Id of the Feature to move.</param>
            <param name="distance">Distance to move the feature by an angle.
            The distance is in the unit of DistanceUnit.</param>
            <param name="angleInDegrees">
            	<para>Number between 0 and 360 degrees representing the direction to move the shape, with zero being up.</para>
            </param>
            <param name="shapeUnit">GeographicUnit of the shape to perform the move on.</param>
            <param name="distanceUnit">Distance unit for the distance.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.Union(System.String,Mapgenix.Shapes.BaseAreaShape)">
            <summary>Returns the union of the Feature and the target shapes.</summary>
            <returns>None</returns>
            <remarks>To easily edit features directly in the FeatureSource without having to retrieve them, convert them to a shape,
            manipulate them and put them back into the FeatureSource.<br/>
            <br/></remarks>
            <param name="featureId">Id of the Feature to union.</param>
            <param name="targetShape">Shape to union with.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.Union(System.String,Mapgenix.Shapes.Feature)">
            <summary>Returns the union of the Feature and the target feature.</summary>
            <returns>None</returns>
            <remarks>To easily edit features directly in the FeatureSource without having to retrieve them, convert them to a shape,
            manipulate them and put them back into the FeatureSource.<br/>
            <br/></remarks>
            <param name="featureId">Id of the Feature to union.</param>
            <param name="targetAreaFeature">Feature to union with.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.GetDifference(System.String,Mapgenix.Shapes.BaseAreaShape)">
            <summary>Returns the difference between two shapes.</summary>
            <remarks>To easily edit features directly in the features without having to retrieve them, convert them to a shape,
            manipulate them and put them back into the FeatureSource.</remarks>
            <returns>None</returns>
            <param name="featureId">Id of Feature to get difference from.</param>
            <param name="targetShape">Shape to find the difference with the feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.GetDifference(System.String,Mapgenix.Shapes.Feature)">
            <summary>Returns the difference between two features.</summary>
            <returns>None</returns>
            <param name="featureId">Feature to remove area from.</param>
            <param name="targetAreaFeature">Feature to find the difference with.</param>
        </member>
        <member name="P:Mapgenix.FeatureSource.EditTools.IsEditable">
            <summary>Returns whether the FeatureLayer allows edits or is read only.</summary>
            <returns>Whether the FeatureLayer allows edits or is read only.</returns>
            <remarks>
            	<para>Useful to check if a specific FeatureLayer accepts editing.
            	Raises exception if BeginTransaction called with IsEditable set to false.</para>
            </remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.EditTools.IsInTransaction">
            <summary>Returns true if the FeatureLayer is in a transaction and false if it is not.</summary>
            <returns>True if the FeatureLayer is in a transaction and false if it is not.</returns>
            <remarks>To enter a transaction, call the BeginTransaction method. It is possible that some FeatureLayers are read only and do not allow
            edits. To end a transaction, call either CommitTransaction or RollbackTransaction.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.EditTools.IsTransactionLive">
            <summary>Returns true if the features currently modified in a transaction
            are expected to reflect their state when calling other methods on the FeatureLayer, such as spatial queries.</summary>
            <returns>True if the features currently modified in a transaction
            are expected to reflect their state when calling other methods on the
            FeatureLayer.</returns>
            <remarks>A live transaction means that all of the modifications performed during
            a transaction are live from the standpoint of the querying methods on the object.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.EditTools.TransactionBuffer">
            <summary>Gets and sets the transaction buffer.</summary>
            <value>None</value>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.Delete(System.String)">
            <summary>Deletes a Feature from an existing transaction.</summary>
            <returns>None</returns>
            <param name="id">Id of the feature in the FeatureLayer to delete.</param>
            <remarks>Deletes a Feature from an existing transaction. Call BeginTransaction before.<br/>
            The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/></remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.Update(Mapgenix.Shapes.BaseShape)">
            <summary>Updates a Feature in an existing transaction.</summary>
            <param name="shape">The shape to update in the transaction. Id of the Shape is the Id of the feature to update.</param>
            <remarks>Updates a Feature from an existing transaction. Call BeginTransaction before.<br/>
            The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/></remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.Update(Mapgenix.Shapes.Feature)">
            <summary>Updates a Feature in an existing transaction.</summary>
            <overloads>Passes in a Feature.</overloads>
            <param name="feature">The Feature to update in the transaction.</param>
            <remarks>Updates a Feature from an existing transaction. Call BeginTransaction before.<br/>
            The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/></remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.Update(Mapgenix.Shapes.BaseShape,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Updates a Feature in an existing transaction.</summary>
            <overloads>Passes in a shape and the columnValues to the Feature to update.</overloads>
            <param name="shape">Shape to update in the transaction. The Id of the Shape needs to be the same as the Id of the feature to update.</param>
            <param name="columnValues">Column values to update in the transaction.</param>
            <remarks>Updates a Feature from an existing transaction. Call BeginTransaction before.<br/>
            The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/></remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.EditTools.CommitTransaction">
            <summary>Commits the existing transaction to its underlying source of data.</summary>
            <returns>TransactionResult class giving the status of the commited transactions.</returns>
            <remarks>
            	<para>Commits the existing transaction to its underlying source of data. Passes back the results of the commit, 
            	including any error(s) received. Finally, frees up the internal memory cache of any features added, updated
                or deleted. Call BeginTransaction first.
                </para>The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Mapgenix.FeatureSource.EditTools.RollbackTransaction" -->
        <member name="T:Mapgenix.FeatureSource.BaseFeatureSource">
            <summary>
            	Abstract class for all feature sources. Feature
                sources represent feature data to be integrated into GSuite.
                <para>Abstract class from which all other feature
                sources are derived. It encapsulates the logic for handling
                transactions and ensuring the data is consistent regardless of the projections used.</para>
            </summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.#ctor">
            <summary>Default constructor for the abstract BaseFeatureSource class.</summary>
            <returns>None</returns>
            <remarks>As protected, add code to this method if you override it from an inheriting class.</remarks>
        </member>
        <member name="E:Mapgenix.FeatureSource.BaseFeatureSource.CustomColumnFetch">
            <summary>Raised when fields are requested in a feature source method that do
            not exist in the feature source. It allows to supplement the data from an outside
            source.</summary>
            <remarks><br/>Used primarily when you have data relating to a particular feature or set of
            features that is not within source of the data.<br/>
            	<br/>
            To integrate this SQL data, you simply create a file name that does not exist in the
            .dbf file.  Whenever GSuite is queried to return records that specifically require
            this field, the BaseFeatureSource will raise this event and allow the developer to
            supply the data. In this way, you can query the SQL table and store the
            data in some sort of collection, and then when the event is raised, simply supply that
            data.<br/>
            	<br/>
            As this is an event, it will raise for each feature and field combination requested.
            This means that the event can be raised quite often, and we suggest that you cache the
            data you wish to supply in memory. We recommend against sending out a new SQL query
            each time this event is raised. 
            </remarks>
        </member>
        <member name="E:Mapgenix.FeatureSource.BaseFeatureSource.CommittingTransaction">
            <summary>Raised after the CommitTransaction method is called, but before the
            CommitTransactionCore is called.  This allows access to the TransactionBuffer before the
            transaction is committed. It also allows to cancel the pending commit of the
            transaction.
            </summary>
            <remarks>
            This event is raised before the CommitTransactionCore is called and allows
            access to the TransactionBuffer before the transaction is committed. It also allows
            to cancel the pending transaction. The TransactionBuffer is the object that stores all
            of the pending transactions and is accessible through this event to allow to either
            add, remove or modify transactions.<br/>
            	<br/>
            In the event that you cancel the CommitTransaction method, the transaction remains intact and
            you will still be editing. This makes it a nice place to possibly check for
            connectivity before the TransactionCore code is run, which is where the records are
            actually committed. Calling the RollBackTransaction method is the only way to
            permanently cancel a pending transaction without committing it.
            </remarks>
        </member>
        <member name="E:Mapgenix.FeatureSource.BaseFeatureSource.CommittedTransaction">
            <summary>Raised after the CommitTransaction and the CommitTransactionCore
            are called and allows access to the TransactionBuffer and the TransactionResults
            object before CommitTransaction method is returned.</summary>
            <remarks>
            	<para>This event is raised after the CommitTransactionCore is called and allows
                access to the TransactionBuffer and the TransactionResults object before
                CommitTransaction method is returned.<br/>
            		<br/>
                With this event, you can analyse the results of the transaction and do any cleanup
                code necessary. In the event some of the records did not commit, you can handle
                those items here. The TransactionResults object is passed out of the
                CommitTransaction method so you could analyze it then; however, this is the only
                place where you have access to both the TransactionResults object and the
                TransactionBuffer object at the same time. These are useful together to try and
                determine what went wrong and possibly try and re-commit them.<br/>
            		<br/>
                At the time of this event you will technically be out of the current
                transaction.</para>
            </remarks>
        </member>
        <member name="E:Mapgenix.FeatureSource.BaseFeatureSource.OpeningFeatureSource">
            <summary>Raised before the opening of the FeatureSource.</summary>
            <remarks>Raised before the opening of the FeatureSource. Technically, this
            event is called after the calling of the Open method on the BaseFeatureSource, but before
            the protected OpenCore method.<br/>
            	<br/>
            It is typical that the BaseFeatureSource may be opened and closed may times during the life
            cycle of your application.</remarks>
        </member>
        <member name="E:Mapgenix.FeatureSource.BaseFeatureSource.OpenedFeatureSource">
            <summary>Raised after the opening of the BaseFeatureSource.</summary>
            <remarks>
            This event is called after the opening of the BaseFeatureSource. Technically, this
            event is called after the calling of the Open method on the BaseFeatureSource and after the
            protected OpenCore method is called.<br/>
            	<br/>
            It is typical that the BaseFeatureSource may be opened and closed may times during the life
            cycle of your application. </remarks>
        </member>
        <member name="E:Mapgenix.FeatureSource.BaseFeatureSource.ClosingFeatureSource">
            <summary>Raised before the closing of the BaseFeatureSource.</summary>
            <remarks>
            This event is called before the closing of the BaseFeatureSource. Technically, this
            event is called after the calling of the Close method on the BaseFeatureSource, but before
            the protected CloseCore method.<br/>
            	<br/>
            It is typical that the FeatureSource may be opened and closed may times during the life
            cycle of your application.</remarks>
        </member>
        <member name="E:Mapgenix.FeatureSource.BaseFeatureSource.ClosedFeatureSource">
            <summary>Raised after the closing of the BaseFeatureSource.</summary>
            <remarks>
            This event is called after the closing of the BaseFeatureSource. Technically, this
            event is called after the calling of the Close method on the BaseFeatureSource and after
            the protected CloseCore method.<br/>
            	<br/>
            It is typical that the BaseFeatureSource may be opened and closed may times during the life
            cycle of your application.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.OnCustomColumnFetch(Mapgenix.FeatureSource.ColumnFetchEventArgs)">
            <summary>Allows to raise the CustomColumnFetch event from a derived class.</summary>
            <returns>None</returns>
            <remarks>
            You can call this method from a derived class to enable it to raise the
            CustomColumnFetch event. This may be useful if you plan to extend BaseFeatureSource and
            you need access to user-definable field data.<br/>
            	<br/>
            Details on the event:<br/>
            	<br/>
            This event is raised when fields are requested in a feature source method that do not
            exist in the feature source. It allows you supplement the data from any outside source
            you may have.<br/>
            	<br/>
            It is used primarily when you have data relating to a particular feature or set of
            features that is not within source of the data. For example, you may have a shapefile of countries
            whose .dbf component describes some characterisctis of each country.
            Additionally, in an outside SQL Server table, you may also have data about the countries,
            and it is this data that you wish to use for determining how you want to color
            each country.<br/>
            	<br/>
            To integrate this SQL data, you simply create a file name that does not exist in the
            .dbf file.  Whenever GSuite is queried to return records that specifically require
            this field, the FeatureSource will raise this event and allow the developer to
            supply the data. In this way, you can query the SQL table and store the
            data in some sort of collection, and then when the event is raised, simply supply that
            data.<br/>
            	<br/>
            As this is an event, it will raise for each feature and field combination requested.
            This means that the event can be raised quite often, and we suggest that you cache the
            data you wish to supply in memory. We recommend against sending out a new SQL query
            each time this event is raised.</remarks>
            <param name="e">
            This parameter is the event arguments which define the parameters passed to the
            recipient of the event.
            </param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.OnCommittingTransaction(Mapgenix.FeatureSource.CommitTransactionEventArgs)">
            <summary>Allows to raise the CommittingTransaction event from a derived class.</summary>
            <returns>None</returns>
            <remarks>
            You can call this method from a derived class to enable it to raise the
            CommittingTransaction event. This may be useful if you plan to extend the FeatureSource
            and you need access to the event.<br/>
            	<br/>
            Details on the event:<br/>
            	<br/>
            This event is raised before the CommitTransactionCore is called and allows you access
            to the TransactionBuffer before the transaction is committed. It also allows to
            cancel the pending transaction. The TransactionBuffer is the object that stores all of
            the pending transactions and is accessible through this event to allow to either add,
            remove or modify transactions.<br/>
            	<br/>
            In the event that you cancel the CommitTransaction method, the transaction remains intact and
            you will still be editing. This makes it a nice place to possibly check for
            connectivity before the TransactionCore code is run, which is where the records are
            actually committed. Calling the RollBackTransaction method is the only way to
            permanently cancel a pending transaction without committing it.
            </remarks>
            <param name="e">Arguments which define the parameters passed to the recipient of the event.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.OnCommittedTransaction(Mapgenix.FeatureSource.CommitTransactionEventArgs)">
            <returns>None</returns>
            <summary>Allows to raise the CommittedTransaction event from a derived class.</summary>
            <remarks>
                You can call this method from a derived class to enable it to raise the
                CommittedTransaction event. This may be useful if you plan to extend the
                FeatureSource and you need access to the event.<br/>
            	<br/>
                Details on the event:<br/>
            	<br/>
            	<para>This event is raised after the CommitTransactionCore is called and allows
                access to the TransactionBuffer and the TransactionResults object before
                CommitTransaction method is returned.<br/>
            		<br/>
                With this event, you can analyze the results of the transaction and do any cleanup
                code necessary. In the event some of the records did not commit, you can handle
                these items here. The TransactionResults object is passed out of the
                CommitTransaction method so you could analyze it then; however, this is the only
                place where you have access to both the TransactionResults object and the
                TransactionBuffer object at the same time. These are useful together to try and
                determine what went wrong and possibly try and re-commit them.<br/>
            		<br/>
                At the time of this event, you will technically be out of the current
                transaction.</para>
            </remarks>
            <param name="e">Event arguments which define the parameters passed to the
            recipient of the event.
            </param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.OnOpeningFeatureSource(System.EventArgs)">
            <returns>None</returns>
            <summary>Allows to raise the OpeningFeatureSource event from a derived
            class.
            </summary>
            <remarks>
            You can call this method from a derived class to enable it to raise the
            OpeningFeatureSource event. Usefull to extend BaseFeatureSource
            and you need access to the event.<br/>
            	<br/>
            Details on the event:<br/>
            	<br/>
            This event is called before the opening of the BaseFeatureSource. Technically, this event is
            called after the calling of the Open method on BaseFeatureSource, but before the
            protected OpenCore method.<br/>
            	<br/>
            It is typical that the FeatureSource may be opened and closed may times during the life
            cycle of your application.</remarks>
            <param name="e">Event arguments defining the parameters passed to the
            recipient of the event.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.OnOpenedFeatureSource(System.EventArgs)">
            <returns>None</returns>
            <summary>Allows to raise the OpenedFeatureSource event from a derived class.</summary>
            <remarks>Call this method from a derived class to enable it to raise the
            OpenedFeatureSource event. Usefull to extend BaseFeatureSource and you need access to the event.<br/>
            	<br/>
            Details on the event:<br/>
            	<br/>
            Raised after the opening of BaseFeatureSource. Technically, this event is
            raised after the calling of the Open method on BaseFeatureSource and after
            protected OpenCore method is called.<br/>
            	<br/>
            It is typical that the FeatureSource may be opened and closed may times during the life
            cycle of an application.</remarks>
            <param name="e">Event arguments defining the parameters passed to the recipient of the event.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.OnClosingFeatureSource(System.EventArgs)">
            <returns>None</returns>
            <summary>Allows to raise the ClosingFeatureSource event from a derived class.</summary>
            <remarks>
            You can call this method from a derived class to enable it to raise the
            ClosingFeatureSource event. Useful to extend the FeatureSource
            and you need access to the event.<br/>
            	<br/>
            Details on the event:<br/>
            	<br/>Raised before the closing of the FeatureSource. Technically, this event is
            called after the calling of the Close method on the FeatureSource, but before the
            protected CloseCore method.<br/>
            	<br/>
            It is typical that the FeatureSource may be opened and closed may times during the life
            cycle of your application. 
            </remarks>
            <param name="e">Event arguments defining the parameters passed to the recipient of the event.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.OnClosedFeatureSource(System.EventArgs)">
            <returns>None</returns>
            <summary>Allows to raise the ClosedFeatureSource event from a derived class.</summary>
            <remarks>Call this method from a derived class to enable it to raise the
            ClosedFeatureSource event. Useful to extend the FeatureSource
            and you need access to the event.<br/>
            	<br/>
            Details on the event:<br/>
            	<br/>
            Raised after the closing of BaseFeatureSource. Technically, this event is
            called after the calling of the Close method on the FeatureSource and after the
            protected CloseCore method.<br/>
            	<br/>
            It is typical that the FeatureSource may be opened and closed may times during the life
            cycle of your application. 
            </remarks>
            <param name="e">Event arguments defining the parameters passed to the
            recipient of the event.
            </param>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.CanExecuteSqlQuery">
            <summary>Specifies whether BaseFeatureSource can excute a SQL query or not.
            If it is false, it throws an exception when these APIs are called: ExecuteScalar, ExecuteNonQuery, ExecuteQuery</summary>
            <remarks>Default implementation is false.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.CanExecuteSqlQueryCore">
            <summary>Specifies whether BaseFeatureSource can excute a SQL query or not.
            If it is false, it throws an exception when these APIs are calleds: ExecuteScalar, ExecuteNonQuery, ExecuteQuery
            </summary>
            <remarks>Default implementation is false.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.IsOpen">
            <summary>Returns true if BaseFeatureSource is open and false if it is not.</summary>
            <returns>True if the FeatureSource is open.</returns>
            <remarks>
            Various methods on BaseFeatureSource require it to be in an open state. If one
            of those methods is called when the state is not open, the method throws an
            exception. To enter the open state, call BaseFeatureSource Open method. The
            method raises an exception if the current BaseFeatureSource is already open.
            </remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.IsOpenCore">
            <summary>Returns true if BaseFeatureSource is open.</summary>
            <returns>True if the FeatureSource is open.</returns>
            <remarks>
            Various methods on BaseFeatureSource require that it be in an open state. If one
            of those methods is called when the state is not open, the method throws an
            exception. To enter the open state, call BaseFeatureSource Open method. The
            method raises an exception if the current FeatureSource is already open.
            </remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.FeatureSourceColumns">
            <summary>Gets a collection of columns of the feature source.</summary>
            <returns>Collection of columns of the feature source.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.IsInTransaction">
            <summary>Returns true if BaseFeatureSource is in a transaction.</summary>
            <returns>True if BaseFeatureSource is in a transaction.</returns>
            <remarks>
            To enter a transaction, call BeginTransaction method of BaseFeatureSource. To end a transaction, call either CommitTransaction or
            RollbackTransaction.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.IsTransactionLive">
            <summary>Returns true if the features currently modified in a transaction
            are expected to reflect their state when calling other methods on BaseFeatureSource,
            such as spatial queries.</summary>
            <returns>True if the features currently modified in a transaction
            are expected to reflect their state when calling other methods on the
            FeatureSource.</returns>
            <remarks>
            The live transaction means that all of the modifications performed during
            a transaction are live from the standpoint of the querying methods on the object.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.IsEditable">
            <summary>Returns whether BaseFeatureSource allows editing or is read-only.</summary>
            <returns>Whether BaseFeatureSource allows editing or is read-only.</returns>
            <remarks>
            	<para>This property is useful to check if a specific FeatureSource accepts editing.
                If you call BeginTransaction and this property is false, then an exception will
                be raised.<br/>
            		<br/>
                For developers who are creating or extending BaseFeatureSource, it is expected to override this virtual method 
                if the new BaseFeatureSource created allows editing. By default, it is false, meaning that to allow editing you
                must override this method and return true.</para>
            </remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.Projection">
            <summary>Holds the projection object used within BaseFeatureSource to ensure that features inside are projected.</summary>
            <returns>Map projections selected by the developer for the feature source.</returns>
            <remarks>
            By default this property is null, meaning that the data being passed back from any
            methods on BaseFeatureSource is in the coordinate system of the raw data. When you
            specify a projection object in the property, all incoming and outgoing method
            calls will subject the features to projection.<br/>
            </remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.GeoCache">
            <summary>Cache system.</summary>
            <remarks>Set IsActive to true for the Cache system. By default it is not active.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.FeatureIdsToExclude">
            <summary>Collection of strings representing record id of features to exclude from the Layer.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.BaseFeatureSource.TransactionBuffer">
            <summary>TransactionBuffer used in the Transaction System.</summary>
            <remarks>
            	<br/>
            The Transaction System<br/>
            	<br/>
            The transaction system of a BaseFeatureSource is on top of the inherited implementation
            of any specific source. In this way, it functions the same way for every feature source. 
            First call BeginTransaction. This allocates a collection of in-memory change buffers that are used to store changes until
            the transaction is commited. So, for example, when Add, Delete or Update
            method are called, the changes to the feature are stored in memory only. If you
            choose to abandon the transaction, call RollbackTransaction at any time and the
            in-memory buffer will be deleted and the changes will be lost. When you are ready to
            commit the transaction, call CommitTransaction and the collections of changes
            are then passed to the CommitTransactionCore method and the implementer of the specific
            BaseFeatureSource is responsible for integrating the changes into the underlying
            BaseFeatureSource. By default the IsLiveTransaction property is set to false, meaning
            that until the changes are committed, the BaseFeatureSource APIs will not reflect any changes
            that are in the temporary editing buffer.<br/>
            	<br/>
            In  case where the IsLiveTransaction is set to true, then it is a bit different.
            The live transaction means that all of the modifications
            performed during a transaction are live from the standpoint of the querying methods on
            the object.<br/>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ExecuteNonQuery(System.String)">
            <summary>Executes a SQL statement against a connection object.</summary>
            <returns>Number of rows affected.</returns>
            <param name="sqlStatement">sqlStatement to execute.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ExecuteNonQueryCore(System.String)">
            <summary>Executes a SQL statement against a connection object.</summary>
            <returns>Number of rows affected.</returns>
            <param name="sqlStatement">sqlStatement to execute.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesByColumnValue(System.String,System.String,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Gets collection of features by passing a columnName and a specified columValue.</summary>
            <returns>Collection of features matching the columnValue.</returns>
            <param name="columnName">Column name  to match the column value.</param>
            <param name="columnValue">Column value to match those returning features.</param>
            <param name="returningColumnType">Type of ReturningColumnsType for each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesByColumnValue(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets collection of features by passing a columnName and a specified columValue.</summary>
            <returns>Collection of features matching the columnValue.</returns>
            <param name="columnName">Column name  to match the column value.</param>
            <param name="columnValue">Column value to match those returning features.</param>
            <param name="returningColumnNames">Columns for each feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesByColumnValue(System.String,System.String)">
            <summary>Gets collection of features by passing a columnName and a specified columValue.</summary>
            <returns>Collection of features matching the columnValue.</returns>
            <param name="columnName">Column name  to match the column value.</param>
            <param name="columnValue">Column value to match those returning features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesByColumnValueCore(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets collection of features by passing a columnName and a specified columValue.</summary>
            <returns>Collection of features matching the columnValue.</returns>
            <param name="columnName">Column name  to match the column value.</param>
            <param name="columnValue">Column value to match those returning features.</param>
            <param name="returningColumnNames">Columns for each feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ExecuteScalar(System.String)">
            <summary>
            Executes the query and returns the first column of the first row in the result
            set returned by the query.
            </summary>
            <returns>First column of the first row in the result set.</returns>
            <remarks>
            Use the ExcuteScalar method to retrieve a single value from the database. 
            </remarks>
            <param name="sqlStatement">sqlStatement to execute.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ExecuteScalarCore(System.String)">
            <summary>
            Executes the query and returns the first column of the first row in the result
            set returned by the query.
            </summary>
            <returns>First column of the first row in the result set.</returns>
            <remarks>
            Use ExcuteScalar method to retrieve a single value from the database. 
            </remarks>
            <param name="sqlStatement">sqlStatement to execute.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ExecuteQuery(System.String)">
            <summary>
            Executes the query and returns the result of the query.
            </summary>
            <returns>Result set in the format of dataTable.</returns>
            <remarks>
            Use ExecuteScalar method to retrieve a single value from the database. 
            </remarks>
            <param name="sqlStatement">SqlStatement to execute.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ExecuteQueryCore(System.String)">
            <summary>
            Executes the query and returns the result of the query.
            </summary>
            <returns>Result set in the format of dataTable.</returns>
            <remarks>
            Use ExecuteScalar method to retrieve a single value from the database. 
            </remarks>
            <param name="sqlStatement">SqlStatement to execute.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetColumns">
            <summary>Returns the collection of columns available for the feature source and caches
            them.</summary>
            <returns>Collection of columns available for the feature source.</returns>
            <remarks>
            As the concrete method wrapping GetColumnsCore, note that this method will cache the results to GetColumnsCore. 
            It means that the first time this method is called it calls GetCollumnsCore, which is protected,
            and cache the results. The next time this method is called it does not call
            GetColumnsCore again.<br/>
            	<br/>
            As a concrete public method that wraps a Core method, Mapgenix reserves the right
            to add events and other logic returned by the Core version
            of the method.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetColumnsCore">
            <summary>Returns the collection of columns available for the feature source and caches
            them.</summary>
            <returns>Collection of columns available for the feature source.</returns>
            <remarks>
            As the concrete method wrapping GetColumnsCore, note that this method will cache the results to GetColumnsCore. 
            It means that the first time this method is called it calls GetCollumnsCore, which is protected,
            and cache the results. The next time this method is called it does not call
            GetColumnsCore again.<br/>
            	<br/>
            As a concrete public method that wraps a Core method, Mapgenix reserves the right
            to add events and other logic returned by the Core version
            of the method.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.RefreshColumns">
            <summary>Refreshes the columns of BaseFeatureSource and caches them.</summary>
            <remarks>
            None.
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetCount">
            <summary>Returns the count of the number of records in the BaseFeatureSource.</summary>
            <returns>Count of the number of records in the FeatureSource.</returns>
            <remarks>Concrete wrapper pf virtual method GetCountCore.<br/>
            	<br/>
            The default implementation of GetCountCore uses the GetAllRecordsCore method to
            calculate how many records in BaseFeatureSource.<br/>
            	<br/>
            As a concrete public method that wraps a Core method, Mapgenix reserves the right
            to add events and other logic returned by the Core version of the method.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetCountCore">
            <summary>Returns number of records in the BaseFeatureSource.</summary>
            <returns>Number of records in the BaseFeatureSource.</returns>
            <remarks>
            	<para>Protected virtual method called from concrete public method
                GetCount. It does not take into account any transaction activity, being handled by the concrete public method GetCount.<br/>
            		<br/>
                The default implementation of GetCountCore uses the GetAllRecordsCore method to
                calculate how many records there are in BaseFeatureSource.<br/>
            		<br/>
                If you do not override this method, it gets the count by calling the
                GetAllFeatureCore method and counting each feature. It is inefficient way
                to get the count in most data sources. It is recommended to override
                this method and replace it with a more optimized method.</para>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetBoundingBox">
            <summary>Returns the bounding box encompassing all of the features in BaseFeatureSource.</summary>
            <returns>Bounding box encompassing all of the features in BaseFeatureSource.</returns>
            <remarks>Concrete wrapper of virtual method GetBoundingBoxCore. <br/>
            	<br/>
            The default implementation of GetBoundingBoxCore uses the GetAllRecordsCore method to
            calculate the bounding box of the FeatureSource. It is recommended to provide
            one's own implementation for this method to be more efficient.<br/>
            	<br/>
            As a concrete public method that wraps a Core method, Mapgenix reserves the right
            to add events and other logic returned by the Core version of the method. </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetBoundingBoxCore">
            <summary>Returns the bounding box encompassing all of the features in BaseFeatureSource.</summary>
            <returns>Bounding box encompassing all of the features in BaseFeatureSource.</returns>
            <remarks>
            	<para>Protected virtual method called from the concrete public method
                GetBoundingBox.<br/>
            		<br/>
                The default implementation of GetBoundingBoxCore uses GetAllRecordsCore method
                to calculate the bounding box of BaseFeatureSource. It is recommended to
                provide one's own implementation for this method to be more efficient.<br/>
            <br/></para>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.Open">
            <summary>Opens BaseFeatureSource to have it ready to use.</summary>
            <returns>None</returns>
            <remarks>
            	<para>Concrete wrapper of abstract method OpenCore. It is responsible for initializing BaseFeatureSource.<br/>
                As a concrete public method that wraps a Core method, Mapgenix reserves the right
                to add events and other logic returned by the Core version of the method.</para>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.OpenCore">
            <summary>Opens BaseFeatureSource to get it ready to use.</summary>
            <remarks>Protected virtual method called from the concrete public method Open.
            It is responsible for initializing BaseFeatureSource.<br/>
            	<br/>
            When implementing this virtual method ,consider opening files for file-based sources,
            connecting to databases in the database-based feature sources and so on. Close these in the Close method of BaseFeatureSource.
            </remarks>
            <returns>None</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.Close">
            <summary>Closes BaseFeatureSource and releases any resources used by it.
            </summary>
            <returns>None</returns>
            <remarks>Concrete wrapper for the abstract method CloseCore.
            As  a concrete public method that wraps a Core method, Mapgenix reserves the right
            to add events and other logic returned by the Core version of the method.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.CloseCore">
            <summary>Closes BaseFeatureSource and releases any resources used by it.</summary>
            <returns>None</returns>
            <remarks>Protected virtual method called from the concrete public method Close.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.BeginTransaction">
            <summary>Starts a new transaction in case BaseFeatureSource allows editing.</summary>
            <returns>None</returns>
            <remarks>Used to start a transaction, in case BaseFeatureSource allows
            editing. BaseFeatureSource must be open.<br/>
            	<br/>
            	 /// The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.AddFeature(Mapgenix.Shapes.Feature)">
            <summary>Adds a Feature to an existing transaction.</summary>
            <remarks>Adds a Feature to an existing transaction. Call BeginTransaction first.<br/>
            	<br/>
            	<br/>
            	 /// The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
            <returns>ID string uniquely identifying the Feature while in transaction.</returns>
            <param name="feature">Feature to add to the transaction.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.AddFeature(Mapgenix.Shapes.BaseShape)">
            <summary>Adds a Feature with a shape to an existing transaction.</summary>
            <remarks>Adds a Feature with a shape to an existing transaction. Call BeginTransaction first.<br/>
            	<br/>
            	<br/>
            	 /// The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
            <returns>ID string uniquely identifying the Feature while in transaction.</returns>
            <param name="shape">BaseShape used to create the Feature to add to the transaction.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.AddFeature(Mapgenix.Shapes.BaseShape,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Adds a Feature with a shape to an existing transaction.</summary>
            <remarks>Adds a Feature with a shape to an existing transaction. Call BeginTransaction first.<br/>
            	<br/>
            	<br/>
            	 /// The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
            <returns>ID string uniquely identifying the Feature while in transaction.</returns>
            <param name="shape">BaseShape used to create the Feature to add to the transaction.</param>
            <param name="columnValues">Column name value pairs for the feature to add to the transaction..</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.DeleteFeature(System.String)">
            <summary>This method deletes a Feature from an existing transaction.</summary>
            <remarks>Deletes a Feature from an existing transaction. Call BeginTransaction first.<br/>
            	<br/>
            	<br/>
            	The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
            <returns>None</returns>
            <param name="id">Id of the feature in the FeatureSource to delete.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.UpdateFeature(Mapgenix.Shapes.Feature)">
            <summary>Updates a Feature in an existing transaction.</summary>
            <returns>None</returns>
            <param name="feature">Feature to update in the transaction.</param>
            <remarks>
            	<para>Updates a Feature in an existing transaction. Call BeginTransaction first.</para>
            	The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.RollbackTransaction">
            <summary>Cancels an existing transaction. It frees up the internal memory cache of any feature added, updated or deleted.</summary>
            <returns>None</returns>
            <remarks>
            	<para>Cancels an existing transaction. It frees up the internal
                memory cache of any features added, updated or deleted. Call BeginTransaction first.</para>
            	The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.CommitTransaction">
            <summary>Commits the existing transaction to its underlying source of data.</summary>
            <returns>Value of this method is a TransactionResult class with status of the committed transaction.</returns>
            <remarks>
            	<para>Concrete wrapper of virtual method CommitTransactionCore. Call BeginTransaction first.</para>
            	The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.CommitTransactionCore(Mapgenix.FeatureSource.TransactionBuffer)">
            <summary>Commits the existing transaction to its underlying source of data.</summary>
            <returns>TransactionResult class with status of the committed transaction.</returns>
            <param name="transactions">Transaction with the adds, edits and deletes that make up the
            transaction. To write the changes to the underlying data source.</param>
            <remarks>The Transaction System<br/>
            	<br/>
            The transaction system is the same independently of the speficic FeatureSource (shapefile, in memory layer etc).
            First call BeginTransaction (Allocates a collection of in-memory change buffers to store changes before committing transactions).
            Call RollbackTransaction to revert before BeginTransaction.
            To commit, call CommitTransaction and the collection of changes are passed to CommitTransactionCore with 
            the logic of committting specific to a source.
            By default IsLiveTransaction property is set to false, meaning that until the changes are committed, any changes
            that are in the temporary editing buffer will not be reflected.<br/>
            	<br/>
            In the case where the IsLiveTransaction is set to true, the live transaction concept means that all of the modifications
            performed during a transaction are live.<br/>
            	<br/>
            As an example, a FeatureLayer has 20 records.
            Next, a transaction begins and then GetAllFeatures is called. The result is 20
            records. Delete one of the records and call the GetAllFeatures
            again.  Only 19 records are retrieved, even though the transaction has not yet been committed.<br/>
            <br/>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetAllFeatures(System.Collections.Generic.IEnumerable{System.String})">
             <summary>Returns collection of all the features in the FeatureSource.</summary>
             <returns>Collection of all the features in the FeatureSource
             </returns>
             <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
             <remarks>Returns collection of features in BaseFeatureSource. Returns
             what is returned by GetAllFeaturesCore method, with any of the additions or
             subtractions made if in a live transaction.<br/>
            <br/>
             As a concrete public method that wraps a Core method, Mapgenix reserves the right
             to add events and other logic returned by the Core version of the method. </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetAllFeatures(Mapgenix.Shapes.ReturningColumnsType)">
             <summary>Returns collection of all the features in the FeatureSource.</summary>
             <returns>Collection of all the features in the FeatureSource
             </returns>
             <param name="returningColumnNamesType">Column name type.</param>
             <remarks>Returns collection of features in BaseFeatureSource. Returns
             what is returned by GetAllFeaturesCore method, with any of the additions or
             subtractions made if in a live transaction.<br/>
            <br/>
             As a concrete public method that wraps a Core method, Mapgenix reserves the right
             to add events and other logic returned by the Core version of the method. </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetAllFeaturesCore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns collection of all the features in the FeatureSource.</summary>
            <returns>Collection of all the features in the FeatureSource
            </returns>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
            <remarks>Returns collection of features in BaseFeatureSource. Returns
            what is returned by GetAllFeaturesCore method, with any of the additions or
            subtractions made if in a live transaction.<br/></remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesOutsideBoundingBox(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features outside of the target rectangle.</summary>
            <returns>Collection of features outside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesOutsideBoundingBox(Mapgenix.Shapes.RectangleShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features outside of the target rectangle.</summary>
            <returns>Collection of features outside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesOutsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features outside of the target rectangle.</summary>
            <returns>Collection of features outside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesInsideBoundingBox(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features inside of the target rectangle.</summary>
            <returns>Collection of features inside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesInsideBoundingBox(Mapgenix.Shapes.RectangleShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features inside of the target rectangle.</summary>
            <returns>Collection of features inside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesInsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features inside of the target rectangle.</summary>
            <returns>Collection of features inside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesForDrawing(Mapgenix.Shapes.RectangleShape,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features used for drawing.</summary>
            <returns>Collection of features used for drawing..</returns>
            <param name="boundingBox">Bounding box of the features to draw.</param>
            <param name="screenWidth">Width of the canvas, in screen pixels, to draw on.</param>
            <param name="screenHeight">Height of the canvas, in screen pixels, to draw on.
            </param>
            <param name="returningColumnNames">Field names of the column data.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesForDrawingCore(Mapgenix.Shapes.RectangleShape,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns collection of features for drawing.</summary>
            <returns>Collection of features for drawing.</returns>
            <param name="boundingBox">Bounding box of the features to draw.</param>
            <param name="screenWidth">Width of the canvas, in screen pixels, to draw on.</param>
            <param name="screenHeight">Height of the canvas, in screen pixels, to draw on.</param>
            <param name="returningColumnNamesType">Returning Columns Type.</param> 
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.SpatialQuery(Mapgenix.Shapes.BaseShape,Mapgenix.FeatureSource.QueryType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features based on the target Feature and the spatial query type specified.</summary>
            <returns>Collection of features based on the target Feature and the spatial query type specified.</returns>
            <remarks>
            	<para>Returns a collection of features based on the target Feature and the
                spatial query type specified below. If there is a current transaction and it is
                marked as live, then the results will include any transaction Feature that
                applies.<br/>
            		<br/>
            		<strong>Spatial Query Types:</strong><br/>
            		<br/>
            		<strong>Disjoint</strong> - Returns a collection of features where the specific Feature
                and the targetShape have no points in common.<br/>
            		<br/>
            		<strong>Intersects</strong> - Returns a collection of features where where the specific
                Feature and the targetShape have at least one point in common.<br/>
            		<br/>
            		<strong>Touches</strong> - Returns a collection of features where the specific Feature
                and the targetShape have at least one boundary point in common, but no interior
                points.<br/>
            		<br/>
            		<strong>Crosses</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all interior points.<br/>
            		<br/>
            		<strong>Within</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the targetShape.<br/>
            		<br/>
            		<strong>Contains</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the current shape.<br/>
            		<br/>
            		<strong>Overlaps</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all points in common.<br/>
            		<br/>
            		<strong>TopologicalEqual</strong> - Returns a collection of features where the specific
                Feature and the target Shape are topologically equal.<br/>
            		<br/>
                The default implementation of SpatialQueryCore uses
                GetFeaturesInsideBoundingBoxCore method to pre-filter the spatial query. It is recommended to provide one's own implementation 
                for this method that is more efficient. When you override this method, it is recommned to use a spatial index<br/>
            		<br/>
            		<br/>
                As a concrete public method that wraps a Core method, Mapgenix reserves the right
                to add events and other logic returned by the Core version of the method. </para>
            </remarks>
            <param name="targetShape">Target shape in spatial query.</param>
            <param name="queryType">Kind of spatial query to perform.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.SpatialQuery(Mapgenix.Shapes.BaseShape,Mapgenix.FeatureSource.QueryType,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features based on the target Feature and the spatial query type specified.</summary>
            <returns>Collection of features based on the target Feature and the spatial query type specified.</returns>
            <remarks>
            	<para>Returns a collection of features based on the target Feature and the
                spatial query type specified below. If there is a current transaction and it is
                marked as live, then the results will include any transaction Feature that
                applies.<br/>
            		<br/>
            		<strong>Spatial Query Types:</strong><br/>
            		<br/>
            		<strong>Disjoint</strong> - Returns a collection of features where the specific Feature
                and the targetShape have no points in common.<br/>
            		<br/>
            		<strong>Intersects</strong> - Returns a collection of features where where the specific
                Feature and the targetShape have at least one point in common.<br/>
            		<br/>
            		<strong>Touches</strong> - Returns a collection of features where the specific Feature
                and the targetShape have at least one boundary point in common, but no interior
                points.<br/>
            		<br/>
            		<strong>Crosses</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all interior points.<br/>
            		<br/>
            		<strong>Within</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the targetShape.<br/>
            		<br/>
            		<strong>Contains</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the current shape.<br/>
            		<br/>
            		<strong>Overlaps</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all points in common.<br/>
            		<br/>
            		<strong>TopologicalEqual</strong> - Returns a collection of features where the specific
                Feature and the target Shape are topologically equal.<br/>
            		<br/>
                The default implementation of SpatialQueryCore uses
                GetFeaturesInsideBoundingBoxCore method to pre-filter the spatial query. It is recommended to provide one's own implementation 
                for this method that is more efficient. When you override this method, it is recommned to use a spatial index<br/>
            		<br/>
            		<br/>
                As a concrete public method that wraps a Core method, Mapgenix reserves the right
                to add events and other logic returned by the Core version of the method. </para>
            </remarks>
            <param name="targetShape">Target shape in spatial query.</param>
            <param name="queryType">Kind of spatial query to perform.</param>
            <param name="returningColumnNamesType">Column type.</param>  
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.SpatialQuery(Mapgenix.Shapes.Feature,Mapgenix.FeatureSource.QueryType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features based on the target Feature and the spatial query type specified.</summary>
            <returns>Collection of features based on the target Feature and the spatial query type specified.</returns>
            <remarks>
            	<para>Returns a collection of features based on the target Feature and the
                spatial query type specified below. If there is a current transaction and it is
                marked as live, then the results will include any transaction Feature that
                applies.<br/>
            		<br/>
            		<strong>Spatial Query Types:</strong><br/>
            		<br/>
            		<strong>Disjoint</strong> - Returns a collection of features where the specific Feature
                and the targetShape have no points in common.<br/>
            		<br/>
            		<strong>Intersects</strong> - Returns a collection of features where where the specific
                Feature and the targetShape have at least one point in common.<br/>
            		<br/>
            		<strong>Touches</strong> - Returns a collection of features where the specific Feature
                and the targetShape have at least one boundary point in common, but no interior
                points.<br/>
            		<br/>
            		<strong>Crosses</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all interior points.<br/>
            		<br/>
            		<strong>Within</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the targetShape.<br/>
            		<br/>
            		<strong>Contains</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the current shape.<br/>
            		<br/>
            		<strong>Overlaps</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all points in common.<br/>
            		<br/>
            		<strong>TopologicalEqual</strong> - Returns a collection of features where the specific
                Feature and the target Shape are topologically equal.<br/>
            		<br/>
                The default implementation of SpatialQueryCore uses
                GetFeaturesInsideBoundingBoxCore method to pre-filter the spatial query. It is recommended to provide one's own implementation 
                for this method that is more efficient. When you override this method, it is recommned to use a spatial index<br/>
            		<br/>
            		<br/>
                As a concrete public method that wraps a Core method, Mapgenix reserves the right
                to add events and other logic returned by the Core version of the method. </para>
            </remarks>
            <param name="targetShape">Target shape in spatial query.</param>
            <param name="queryType">Kind of spatial query to perform.</param>
            <param name="returningColumnNames">Column names.</param>  
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.SpatialQuery(Mapgenix.Shapes.Feature,Mapgenix.FeatureSource.QueryType,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features based on the target Feature and the spatial query type specified.</summary>
            <returns>Collection of features based on the target Feature and the spatial query type specified.</returns>
            <remarks>
            	<para>Returns a collection of features based on the target Feature and the
                spatial query type specified below. If there is a current transaction and it is
                marked as live, then the results will include any transaction Feature that
                applies.<br/>
            		<br/>
            		<strong>Spatial Query Types:</strong><br/>
            		<br/>
            		<strong>Disjoint</strong> - Returns a collection of features where the specific Feature
                and the targetShape have no points in common.<br/>
            		<br/>
            		<strong>Intersects</strong> - Returns a collection of features where where the specific
                Feature and the targetShape have at least one point in common.<br/>
            		<br/>
            		<strong>Touches</strong> - Returns a collection of features where the specific Feature
                and the targetShape have at least one boundary point in common, but no interior
                points.<br/>
            		<br/>
            		<strong>Crosses</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all interior points.<br/>
            		<br/>
            		<strong>Within</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the targetShape.<br/>
            		<br/>
            		<strong>Contains</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the current shape.<br/>
            		<br/>
            		<strong>Overlaps</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all points in common.<br/>
            		<br/>
            		<strong>TopologicalEqual</strong> - Returns a collection of features where the specific
                Feature and the target Shape are topologically equal.<br/>
            		<br/>
                The default implementation of SpatialQueryCore uses
                GetFeaturesInsideBoundingBoxCore method to pre-filter the spatial query. It is recommended to provide one's own implementation 
                for this method that is more efficient. When you override this method, it is recommned to use a spatial index<br/>
            		<br/>
            		<br/>
                As a concrete public method that wraps a Core method, Mapgenix reserves the right
                to add events and other logic returned by the Core version of the method. </para>
            </remarks>
            <param name="targetShape">Target shape in spatial query.</param>
            <param name="queryType">Kind of spatial query to perform.</param>
            <param name="returningColumnNamesType">Column type.</param>  
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.SpatialQueryCore(Mapgenix.Shapes.BaseShape,Mapgenix.FeatureSource.QueryType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features based on the target Feature and the spatial query type specified.</summary>
            <returns>Collection of features based on the target Feature and the spatial query type specified.</returns>
            <remarks>
            	<para>Returns a collection of features based on the target Feature and the
                spatial query type specified below. If there is a current transaction and it is
                marked as live, then the results will include any transaction Feature that
                applies.<br/>
            		<br/>
            		<strong>Spatial Query Types:</strong><br/>
            		<br/>
            		<strong>Disjoint</strong> - Returns a collection of features where the specific Feature
                and the targetShape have no points in common.<br/>
            		<br/>
            		<strong>Intersects</strong> - Returns a collection of features where where the specific
                Feature and the targetShape have at least one point in common.<br/>
            		<br/>
            		<strong>Touches</strong> - Returns a collection of features where the specific Feature
                and the targetShape have at least one boundary point in common, but no interior
                points.<br/>
            		<br/>
            		<strong>Crosses</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all interior points.<br/>
            		<br/>
            		<strong>Within</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the targetShape.<br/>
            		<br/>
            		<strong>Contains</strong> - Returns a collection of features where the specific Feature
                lies within the interior of the current shape.<br/>
            		<br/>
            		<strong>Overlaps</strong> - Returns a collection of features where the specific Feature
                and the targetShape share some but not all points in common.<br/>
            		<br/>
            		<strong>TopologicalEqual</strong> - Returns a collection of features where the specific
                Feature and the target Shape are topologically equal.<br/>
            		<br/>
                The default implementation of SpatialQueryCore uses
                GetFeaturesInsideBoundingBoxCore method to pre-filter the spatial query. It is recommended to provide one's own implementation 
                for this method that is more efficient. When you override this method, it is recommned to use a spatial index<br/>
            		<br/>
            		<br/>
                As a concrete public method that wraps a Core method, Mapgenix reserves the right
                to add events and other logic returned by the Core version of the method. </para>
            </remarks>
            <param name="targetShape">Target shape in spatial query.</param>
            <param name="queryType">Kind of spatial query to perform.</param>
            <param name="returningColumnNames">Column names.</param>  
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesNearestTo(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a user defined number collection of features that are closest to the TargetShape.</summary>
            <returns>User defined number collection of features that are closest to the TargetShape.</returns>
            <remarks>It is important to note that the TargetShape and the FeatureSource
                must be in the same unit, such as feet or meters. If there is a current transaction and it is marked as live, then
                the results will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Shape to find nearest features from.</param>
            <param name="unitOfData">Unit of data that the TargetShape and the FeatureSource are in, such as feet, meters, etc.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNames">Column names to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesNearestTo(Mapgenix.Shapes.Feature,Mapgenix.Shapes.GeographyUnit,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a user defined number collection of features that are closest to the TargetShape.</summary>
            <returns>User defined number collection of features that are closest to the TargetShape.</returns>
            <remarks>It is important to note that the TargetShape and the FeatureSource
                must be in the same unit, such as feet or meters. If there is a current transaction and it is marked as live, then
                the results will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Shape to find nearest features from.</param>
            <param name="unitOfData">Unit of data that the TargetShape and the FeatureSource are in, such as feet, meters, etc.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesNearestTo(Mapgenix.Shapes.Feature,Mapgenix.Shapes.GeographyUnit,System.Int32,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a user defined number collection of features that are closest to the TargetShape.</summary>
            <returns>User defined number collection of features that are closest to the TargetShape.</returns>
            <remarks>It is important to note that the TargetShape and the FeatureSource
                must be in the same unit, such as feet or meters. If there is a current transaction and it is marked as live, then
                the results will include any transaction Feature that applies.</remarks>
            <param name="targetFeature">Feature to find nearest features from.</param>
            <param name="unitOfData">Unit of data that the TargetShape and the FeatureSource are in, such as feet, meters, etc.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesNearestTo(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Double,Mapgenix.Shapes.DistanceUnit)">
            <summary>Returns a user defined number collection of features that are closest to the TargetShape.</summary>
            <returns>User defined number collection of features that are closest to the TargetShape.</returns>
            <remarks>It is important to note that the TargetShape and the FeatureSource
                must be in the same unit, such as feet or meters. If there is a current transaction and it is marked as live, then
                the results will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Shape to find nearest features from.</param>
            <param name="unitOfData">Unit of data that the TargetShape and the FeatureSource are in, such as feet, meters, etc.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNames">Column names.</param>
            <param name="searchRadius">Maximim search radius</param>
            <param name="unitOfSearchRadius">Distance unit of the search radius</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesNearestTo(Mapgenix.Shapes.Feature,Mapgenix.Shapes.GeographyUnit,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Double,Mapgenix.Shapes.DistanceUnit)">
            <summary>Returns a user defined number collection of features that are closest to the TargetShape.</summary>
            <returns>User defined number collection of features that are closest to the TargetShape.</returns>
            <remarks>It is important to note that the TargetShape and the FeatureSource
                must be in the same unit, such as feet or meters. If there is a current transaction and it is marked as live, then
                the results will include any transaction Feature that applies.</remarks>
            <param name="targetFeature">Featuree to find nearest features from.</param>
            <param name="unitOfData">Unit of data that the TargetShape and the FeatureSource are in, such as feet, meters, etc.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNames">Column names.</param>
            <param name="searchRadius">Maximim search radius</param>
            <param name="unitOfSearchRadius">Distance unit of the search radius</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesNearestToCore(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a user defined number collection of features that are closest to the TargetShape.</summary>
            <returns>User defined number collection of features that are closest to the TargetShape.</returns>
            <remarks>It is important to note that the TargetShape and the FeatureSource
                must be in the same unit, such as feet or meters. If there is a current transaction and it is marked as live, then
                the results will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Shape to find nearest features from.</param>
            <param name="unitOfData">Unit of data that the TargetShape and the FeatureSource are in, such as feet, meters, etc.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesWithinDistanceOf(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that are within a certain distance of a TargetShape.</summary>
            <returns>Collection of features that are within a certain distance of a TargetShape</returns>
            <remarks> It is important to note that the TargetShape and the
                FeatureSource must use the same unit, such as feet or meters. If there is a current transaction and
                it is marked as live, then the results will include any transaction Feature that
                applies.</remarks>
            <param name="targetShape">Shape to find features within a distance of.</param>
            <param name="unitOfData">Unit of data that the FeatureSource and TargetShape are in.</param>
            <param name="distanceUnit">Unit of the distance parameter, such as feet, miles, kilometers, etc.</param>
            <param name="distance">Distance</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesWithinDistanceOf(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit,System.Double,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features that are within a certain distance of a TargetShape.</summary>
            <returns>Collection of features that are within a certain distance of a TargetShape</returns>
            <remarks> It is important to note that the TargetShape and the
                FeatureSource must use the same unit, such as feet or meters. If there is a current transaction and
                it is marked as live, then the results will include any transaction Feature that
                applies.</remarks>
            <param name="targetShape">Shape to find features within a distance of.</param>
            <param name="unitOfData">Unit of data that the FeatureSource and TargetShape are in.</param>
            <param name="distanceUnit">Unit of the distance parameter, such as feet, miles, kilometers, etc.</param>
            <param name="distance">Distance</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesWithinDistanceOf(Mapgenix.Shapes.Feature,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that are within a certain distance of a TargetShape.</summary>
            <returns>Collection of features that are within a certain distance of a TargetShape</returns>
            <remarks> It is important to note that the TargetShape and the
                FeatureSource must use the same unit, such as feet or meters. If there is a current transaction and
                it is marked as live, then the results will include any transaction Feature that
                applies.</remarks>
            <param name="targetShape">Shape to find features within a distance of.</param>
            <param name="unitOfData">Unit of data that the FeatureSource and TargetShape are in.</param>
            <param name="distanceUnit">Unit of the distance parameter, such as feet, miles, kilometers, etc.</param>
            <param name="distance">Distance</param>
            <param name="returningColumnNames">Column name.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesWithinDistanceOf(Mapgenix.Shapes.Feature,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit,System.Double,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features that are within a certain distance of a TargetShape.</summary>
            <returns>Collection of features that are within a certain distance of a TargetShape</returns>
            <remarks> It is important to note that the TargetShape and the
                FeatureSource must use the same unit, such as feet or meters. If there is a current transaction and
                it is marked as live, then the results will include any transaction Feature that
                applies.</remarks>
            <param name="targetShape">Shape to find features within a distance of.</param>
            <param name="unitOfData">Unit of data that the FeatureSource and TargetShape are in.</param>
            <param name="distanceUnit">Unit of the distance parameter, such as feet, miles, kilometers, etc.</param>
            <param name="distance">Distance</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesWithinDistanceOfCore(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that are within a certain distance of a TargetShape.</summary>
            <returns>Collection of features that are within a certain distance of a TargetShape</returns>
            <remarks> It is important to note that the TargetShape and the
                FeatureSource must use the same unit, such as feet or meters. If there is a current transaction and
                it is marked as live, then the results will include any transaction Feature that
                applies.</remarks>
            <param name="targetShape">Shape to find features within a distance of.</param>
            <param name="unitOfData">Unit of data that the FeatureSource and TargetShape are in.</param>
            <param name="distanceUnit">Unit of the distance parameter, such as feet, miles, kilometers, etc.</param>
            <param name="distance">Distance</param>
            <param name="returningColumnNames">Column name.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeatureById(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns an feature based on an Id provided.</summary>
            <returns>Feature based on an Id provided..</returns>
            <param name="id">Unique Id for the feature to find.</param>
            <param name="returningColumnNames">Column names returned with the Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeatureById(System.String,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns an feature based on an Id provided.</summary>
            <returns>Feature based on an Id provided..</returns>
            <param name="id">Unique Id for the feature to find.</param>
            <param name="returningColumnNamesType">Column type..</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesByIds(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features based on Ids provided.</summary>
            <returns>Collection of features based on Ids provided.</returns>
            <param name="ids">Unique Ids for the features to find.</param>
            <param name="returningColumnNames">Column names returned with the Features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesByIds(System.Collections.Generic.IEnumerable{System.String},Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features based on Ids provided.</summary>
            <returns>Collection of features based on Ids provided.</returns>
            <param name="ids">Unique Ids for the features to find.</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetBoundingBoxById(System.String)">
            <summary>Returns the bounding box for a feature with Id specified.</summary>
            <returns>Bounding box for a feature with Id specified.</returns>
            <param name="id">Unique Id of the feature to find the bounding box.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetBoundingBoxByIds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a bounding box for the features with Id specified.</summary>
            <returns>Bounding box for the features with Id specified.</returns>
            <param name="ids">Collection of unique Ids of the features to find the bounding box.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetBoundingBoxesByIds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of bounding boxes for the features with Id specified.</summary>
            <returns>Collection of bounding boxes for the features with Id specified.</returns>
            <param name="ids">Collection of unique Ids of the features to find the bounding box.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFirstFeaturesWellKnownType">
            <summary>Returns the well known type representing the first feature of the FeatureSource.</summary>
            <returns>Well known type representing the first feature of the FeatureSource.</returns>
            <remarks>Concrete wrapper for the virtual method GetFirstFeaturesWellKnownTypeCore.<br/>
            	<br/>
            The default implementation of GetFirstFeaturesWellKnownTypeCore uses the GetAllFeaturesCore method to
            get WellKnownType of the first feature from all features. It is recommended to implement one's own more efficient method.<br/>
            	<br/>
            As a concrete public method that wraps a Core method, Mapgenix reserves the right
            to add events and other logic returned by the Core version
            of the method.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFirstFeaturesWellKnownTypeCore">
             <summary>Returns the well known type representing the first feature of the FeatureSource.</summary>
             <returns>Well known type representing the first feature of the FeatureSource.</returns>
             <remarks> Protected virtual method called from the concrete public method
                 GetFirstFeaturesWellKnownType.<br/>
             	<br/>
             The default implementation of GetFirstFeaturesWellKnownTypeCore uses the GetAllFeaturesCore method to
             get WellKnownType of the first feature from all features. It is recommended to implement one's own more efficient method.<br/>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetFeaturesByIdsCore(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features from Ids.</summary>
            <returns>Collection of features from Ids.</returns>
            <remarks>The internal implementation calls the GetAllFeaturesCore. It is recommended to override
            GetFeaturesByIdsCore method for more efficient method.</remarks>
            <param name="ids">Ids which uniquely identify features in the FeatureSource.</param>
            <param name="returningColumnNames">Column names</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ConvertToInternalProjection(System.Collections.Generic.IEnumerable{Mapgenix.Shapes.RectangleShape})">
            <summary>Projects rectangles based on the internal Projection of BaseFeatureSource.</summary>
            <overloads>Projects rectangles based on the internal Projection of BaseFeatureSource.</overloads>
            <returns>Rectangles based on the internal Projection of BaseFeatureSource.</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="rectangles">Rectangles to project.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ConvertToExternalProjection(Mapgenix.Shapes.RectangleShape)">
            <summary>Projects rectangles based on the external Projection of BaseFeatureSource.</summary>
            <overloads>Projects rectangles based on the external Projection of BaseFeatureSource.</overloads>
            <returns>Rectangles based on the external Projection of BaseFeatureSource.</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="rectangles">Rectangles to project.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ConvertToInternalProjection(Mapgenix.Shapes.RectangleShape)">
            <summary>Projects a rectangle based on the internal Projection of BaseFeatureSource.</summary>
            <overloads>Projects a rectangle based on the internal Projection of BaseFeatureSource.</overloads>
            <returns>Rectangle based on the internal Projection of BaseFeatureSource.</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="rectangle">Rectangle to project.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ConvertToInternalProjection(Mapgenix.Shapes.BaseShape)">
            <summary>Projects BaseShape based on the internal Projection of BaseFeatureSource.</summary>
            <overloads>Projects BaseShape based on the internal Projection of BaseFeatureSource.</overloads>
            <returns>BaseShape based on the internal Projection of BaseFeatureSource.</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="baseShape">BaseShape to project.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ConvertToExternalProjection(System.Collections.Generic.IEnumerable{Mapgenix.Shapes.Feature})">
            <summary>Projects a collection of features based on the external Projection of BaseFeatureSource.</summary>
            <overloads>Projects a collection of features based on the external Projection of BaseFeatureSource.</overloads>
            <returns>Collection of features based on the external Projection of BaseFeatureSource.</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="features">Collection of features to project.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ConvertToInternalProjection(System.Collections.Generic.IEnumerable{Mapgenix.Shapes.Feature})">
            <summary>Projects a collection of features based on the internal Projection of BaseFeatureSource.</summary>
            <overloads>Projects a collection of features based on the internal Projection of BaseFeatureSource.</overloads>
            <returns>Collection of features based on the internal Projection of BaseFeatureSource.</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="features">Collection of features to project.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ConvertToExternalProjection(Mapgenix.Shapes.Feature)">
            <summary>Projects a feature based on the external Projection of BaseFeatureSource.</summary>
            <overloads>Projects a feature based on the external Projection of BaseFeatureSource.</overloads>
            <returns>Feature based on the external Projection of BaseFeatureSource.</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="feature">Feature to project.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.ConvertToInternalProjection(Mapgenix.Shapes.Feature)">
            <summary>Projects a feature based on the internal Projection of BaseFeatureSource.</summary>
            <overloads>Projects a feature based on the internal Projection of BaseFeatureSource.</overloads>
            <returns>Feature based on the internal Projection of BaseFeatureSource.</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="feature">Feature to project.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetColumnNamesInsideFeatureSource(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns column names in BaseFeatureSource from a list of field names.</summary>
            <returns>Column names in BaseFeatureSource from a list of field names</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetColumnNamesOutsideFeatureSource(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns column names outside of BaseFeatureSource from a list of field names.</summary>
            <returns>Column names outside of BaseFeatureSource from a list of field names</returns>
            <remarks>Protected method to help developers to implement or extend one of our BaseFeatureSources.</remarks>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.BaseFeatureSource.GetReturningColumnNames(Mapgenix.Shapes.ReturningColumnsType)">
             <summary>Returns columnNames based on returningColumnType.</summary>
             <param name="returningColumnNamesType">ReturningColumnType.</param>
             <returns>ColumnNames based on the given returningColumnNamesType.</returns>
            <remarks>Concrete sub class from BaseFeatureSource can override this logic.</remarks>
        </member>
        <member name="T:Mapgenix.FeatureSource.GridFeatureSource">
            <summary>Source for Grid file.</summary>
            <remarks>
                The <strong>GridFeatureSource</strong> is raster GIS file format. 
                The grid defines geographic space as an array of equally sized square grid points arranged in rows and columns. 
                Each grid point stores a numeric value that represents a geographic attribute (such as elevation or surface slope) for that unit of space. 
                Each grid cell is referenced by its x,y coordinate location.
            </remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.GridFeatureSource.PathFilename">
            <summary>Gets and sets the path and file of the grid file to use.</summary>
            <returns>Path and file of the grid file to use.</returns>
        </member>
        <member name="P:Mapgenix.FeatureSource.GridFeatureSource.CellSize">
            <summary>
            Gets the cell size of the grid.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.GridFeatureSource.NumberOfColumns">
            <summary> Gets the number of column in the grid.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.GridFeatureSource.NumberOfRows">
            <summary>Gets the number of row in the grid.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.GridFeatureSource.LowerLeftPoint">
            <summary>Gets LowerLeft PointShape of the grid.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.GridFeatureSource.NoDataValue">
            <summary>Gets the NoDataValue in the grid.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.GridFeatureSource.IsEditable">
            <summary>Returns true if the FeatureSource allows edits or false if is read only.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.OpenCore">
            <summary>Opens the GridFeatureSource to have it ready to use.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.CloseCore">
            <summary>Closes the FeatureSource and releases any resources it was using.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.GetColumnsCore">
            <summary>Returns the columns available for the GridFeatureSource.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.GetAllFeaturesCore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of Features in the GridFeatureSource.</summary>
            <returns>Collection of Features in the GridFeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.GetBoundingBoxCore">
            <summary>Returns the bounding box encompassing all of the features in the GridFeatureSource.</summary>
            <returns>Bounding box encompassing all of the features in the GridFeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.GetCountCore">
            <summary>Returns the number of records in the GridFeatureSource.</summary>
            <returns>The number of records in the GridFeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.GetFeaturesInsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features of the GridFeatureSource inside of a bounding box.</summary>
            <returns>Collection of features of the GridFeatureSource inside of a bounding box.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.GenerateGrid(Mapgenix.FeatureSource.GridDefinition,Mapgenix.FeatureSource.BaseGridInterpolationModel)">
            <summary>Calculates all the cells in the grid and returns the result in the form of a GridCell matrix.</summary>
            <param name="gridDefinition">Grid definition.</param>
            <param name="gridInterpolationModel">Interpolation model for calculating cell value of the grid</param>
            <returns>GridCell matrix which is calculated based on the input parameters and the interpolation model.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.GenerateGrid">
            <summary>Generates the cell matrix based on number of column and number of row of current grid.</summary>
            <returns>Cell matrix of current grid.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.GridFeatureSource.GenerateGrid(Mapgenix.FeatureSource.GridDefinition,Mapgenix.FeatureSource.BaseGridInterpolationModel,System.IO.Stream)">
            <summary>Calculates all the cells in the grid and returns the result in the form of a GridCell matrix.</summary>
            <param name="gridDefinition">Grid definition.</param>
            <param name="gridInterpolationModel">Interpolation model for calculating cell value of the grid</param>
            <param name="outputStream">Stream associated with the output file.</param>
            <returns>GridCell matrix which is calculated based on the input parameters and the interpolation model.</returns>
        </member>
        <member name="T:Mapgenix.FeatureSource.InMemoryFeatureSource">
            <summary>FeatureSource in memory for dynamic features.</summary>
            <remarks>Usefull for example for real time GPS locations or for location clicked on the map by a user.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.#ctor(System.Collections.Generic.IEnumerable{Mapgenix.FeatureSource.FeatureSourceColumn},System.Collections.Generic.IEnumerable{Mapgenix.Shapes.Feature})">
            <summary>Creates an instance of InMemoryFeatureSource class by passing FeatureSourceColumns.</summary>
            <param name="featureSourceColumns">FeaturesSourceColumns.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.#ctor(System.Collections.Generic.IEnumerable{Mapgenix.FeatureSource.FeatureSourceColumn},System.Collections.Generic.IEnumerable{Mapgenix.Shapes.BaseShape})">
            <summary>Creates an instance of InMemoryFeatureSource class by passing FeatureSourceColumns and Features.</summary>
            <param name="featureSourceColumns">FeaturesSourceColumns to instance for InMemoryFeatureSource.</param>
            <param name="features">Features to instance for the InMemoryFeatureSource.</param>
        </member>
        <member name="P:Mapgenix.FeatureSource.InMemoryFeatureSource.MaxRecordsToDraw">
            <summary>Gets or set the maximum number of features to draw.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.InMemoryFeatureSource.InternalFeatures">
            <summary>Returns the underlying Features stored in memory.</summary>
            <returns>Underlying Features stored in memory.</returns>
            <remarks>Allows to modify and inspect the InternalFeatures held by this
            FeatureSource in memory.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.InMemoryFeatureSource.IsEditable">
            <summary>Returns true if the FeatureSource allows edits or false if is read only.</summary>
            <returns>True if the FeatureSource allows edits or false if is read only.</returns>
            <remarks>
            	<para>Useful to check if a specific FeatureSource accepts editing.
                Raises exception if false and call BeginTransaction.<br/>
            		<br/>
                To create or extent a FeatureSource it is expected to override this virtual method to allows editing.</para>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.BuildIndex">
            <summary>Builds spatial index to increase access speed.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.GetCountCore">
            <summary>Returns the number of records in the FeatureSource.</summary>
            <returns>Number of records in the FeatureSource.</returns>
            <remarks>
            	<para>This protected virtual method called from the concrete public method
                GetCount. It does not take into account any transaction activity being the
                responsibility of the concrete public method GetCount.<br/>
            		<br/>
                The default implementation of GetCountCore uses the GetAllRecordsCore. It is recommended
                to provide one's own implementation to be more efficient<br/>
            		<br/>
                For example, in a ShapeFile the record count is in the main header of the file. 
                For a spatial database , execute a simple query to get the count.</para>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.CommitTransactionCore(Mapgenix.FeatureSource.TransactionBuffer)">
            <summary>Commits the transaction to its underlying source of data.</summary>
            <returns>TransactionResult with status of the commited transaction including the succesfull updates,
            adds, and deletes and any error encountered during the committing of the transaction.</returns>
            <param name="transactions">Transaction buffer encapsulating all the transactions such as the adds, edits and deleted.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.GetAllFeaturesCore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns collection of all the Features in the FeatureSource.</summary>
            <returns>Collection of all of the Features in the FeatureSource.</returns>
            <remarks>No need to consider anything about pending transactions as this is handled in the non Core
            version of the method.</remarks>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.GetFeaturesInsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns collection of Features inside a bounding box.</summary>
            <returns>Collection of Features inside a bounding box.</returns>
            <remarks>No need to consider anything about pending transactions as this is handled in the non Core
            version of the method.</remarks>
            <param name="boundingBox">Bounding box to find Features which are inside.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.GetFeaturesOutsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns collection of Features outside a bounding box.</summary>
            <returns>Collection of Features outside a bounding box.</returns>
            <remarks>No need to consider anything about pending transactions as this is handled in the non Core
            version of the method.</remarks>
            <param name="boundingBox">Bounding box to find Features which are outside.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.GetColumnsCore">
            <summary>Returns the columns available for the FeatureSource.</summary>
            <returns>Columns available for the FeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.GetFeatureByKey(System.String,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a Feature based on a <paramref name="key"/></summary>
            <param name="key">Key of the Feature</param>
            <param name="returningColumnNamesType"></param>
            <returns>Specified Feature</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.InMemoryFeatureSource.GetFeatureByKey(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a Feature based on <paramref name="key"/></summary>
            <param name="key">Key of the Feature</param>
            <param name="returningColumnNames">Fields of the returned Feature</param>
            <returns>Specified Feature</returns>
        </member>
        <member name="T:Mapgenix.FeatureSource.MultipleFeatureSource">
            <summary>FeatureSource dealing with multiple FeatureSource of the same type.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.#ctor">
            <summary>Default cosntructor of MultipleFeatureSource.</summary>
            <remarks>You need to add FeatureSources to MultipleFeatureSource with property FeatureSources.</remarks>
            <returns>None</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.#ctor(System.Collections.Generic.IEnumerable{Mapgenix.FeatureSource.BaseFeatureSource})">
            <summary>Constructor by passing a group of FeatureSources.</summary>
            <param name="featureSources">Target FeatureSources to include in MultipleFeatureSource.</param>
        </member>
        <member name="P:Mapgenix.FeatureSource.MultipleFeatureSource.FeatureSources">
            <summary>Collection of FeatureSources in MultipleFeatureSource.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.MultipleFeatureSource.IsEditable">
            <summary>Returns true if FeatureSource allows edits or false if is read only.</summary>
            <returns>true if FeatureSource allows edits or false if is read only.</returns>
            <remarks>
            	<para>Useful to check if a specific FeatureSource accepts editing.
                Raises exception if false and call BeginTransaction.<br/>
            		<br/>
                To create or extent a FeatureSource it is expected to override this virtual method to allows editing.</para>
            </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetColumnsCore">
            <summary>Returns Columns available for the FeatureSources in MultipleFeatureSource.</summary>
            <returns>Columns available for the FeatureSources in MultipleFeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.OpenCore">
            <summary>Opens MultipleFeatureSource to be ready to use.</summary>
            <returns>None</returns>
            <remarks>Opens all the FeatureSources in the MultipleFeatureSource.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.CloseCore">
            <summary>Closes MultipleFeatureSource and releases any resources used.</summary>
            <remarks>Closes all the FeatureSources in the MultipleFeatureSource.
            </remarks>
            <returns>None</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetCountCore">
            <summary>Returns the total number of records in MultipleFeatureSource.</summary>
            <returns>Total number of records in MultipleFeatureSource.</returns>
            <remarks>Returning feature count stands for all the FeatureSources in the MultipleFeatureSource.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetBoundingBoxCore">
            <summary>Returns the bounding box encompassing all of the FeatureSources in the MultipleFeatureSource.</summary>
            <returns>Bounding box encompassing all of the FeatureSources in the MultipleFeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.CommitTransactionCore(Mapgenix.FeatureSource.TransactionBuffer)">
            <summary>Not supported in the concrete feature source MultipleFeatureSource.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetAllFeaturesCore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of all the Features in the MultipleFeatureSource.</summary>
            <returns>Collection of all the Features in the MultipleFeatureSource.</returns>
            <remarks>Returning collection of Features includes all the features in all the FeatureSources in the MultipleFeatureSource.</remarks>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetFeaturesInsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of all the Features of the MultipleFeatureSource inside a bounding box.</summary>
            <remarks>Collection of all the Features of the MultipleFeatureSource inside a bounding box.</remarks>
            <param name="boundingBox">Bounding box to find Features inside of.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetFeaturesByIdsCore(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of Features based on Ids.</summary>
            <returns>Collection of Features based on Ids.</returns>
            <remarks>Returning collection of Features includes all the features with the passed in Ids insides 
            all the FeatureSources in the MultipleFeautureSource.</remarks>
            <param name="ids">Group of Ids uniquely identifying the Features in the FeatureSource.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetFeaturesForDrawingCore(Mapgenix.Shapes.RectangleShape,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of Features used for drawing.</summary>
            <returns>Collection of Features used for drawing.</returns>
            <remarks>Returns a collection Features to draw in the MultipleFeatureSource inside a bounding box.</remarks>
            <param name="boundingBox">Bounding box where to draw the features.</param>
            <param name="screenWidth">Width in screen pixels of the canvas to draw on.</param>
            <param name="screenHeight">Height in screen pixels of the canvas to draw on.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetFeaturesNearestToCore(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of Features nearest to a TargetShape in the MultipleFeatureSource.</summary>
            <returns>Collection of Features nearest to a TargetShape in the MultipleFeatureSource.</returns>
            <param name="targetShape">Target shape to find nearest Features to.</param>
            <param name="unitOfData">Unit in which the Target Shape and the FeatureSource are in such as feet, meters, decimal degrees.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetFeaturesOutsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of all the Features of the MultipleFeatureSource outside a bounding box.</summary>
            <remarks>Collection of all the Features of the MultipleFeatureSource outside a bounding box.</remarks>
            <param name="boundingBox">Bounding box to find Features outside of.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleFeatureSource.GetFeaturesWithinDistanceOfCore(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of Features within a certain distance
            of a TargetShape. Applies to all featureSources in the MultipleFeatureSource.</summary>
            <returns>Collection of Features within a certain distance of a TargetShape.</returns>
            <param name="targetShape">Target shape to find features within a distance of.</param>
            <param name="unitOfData">Unit the FeatureSources and TargetShape are in such as meters, feet or decimal degrees.</param>
            <param name="distanceUnit">Unit of the distance parameter such as feet, miles or kilometers etc.</param>
            <param name="distance">Distance from the TargetShape to find Features</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Mapgenix.FeatureSource.MultipleFeatureSource.SpatialQueryCore(Mapgenix.Shapes.BaseShape,Mapgenix.FeatureSource.QueryType,System.Collections.Generic.IEnumerable{System.String})" -->
        <member name="T:Mapgenix.FeatureSource.MultipleShapeFileFeatureSource">
            <summary>FeatureSource for multiple ESRI shapefiles.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.MultipleShapeFileFeatureSource.#ctor">
            <summary>Default cosntructor of MultipleShapefileFeatureSource.</summary>
            <remarks>You need to add ShapefileFeatureSources to MultipleShapefileFeatureSource with property FeatureSources.</remarks>
            <returns>None</returns>
        </member>
        <member name="T:Mapgenix.FeatureSource.Properties.ExceptionDescription">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.AddTransactionError">
            <summary>
              Looks up a localized string similar to The add transaction failed for an unknown reason..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.BothIconFilePathAndIconImageAreInvalid">
            <summary>
              Looks up a localized string similar to You can provide a path and file name to an icon or an image but not both..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.CellHeightLessThanZero">
            <summary>
              Looks up a localized string similar to The cellHeight needs to be greater than zero..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.CellWidthLessThanZero">
            <summary>
              Looks up a localized string similar to The cellWidth needs to be greater than zero..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.CheckIsOpenedWhenCloneDeep">
            <summary>
              Looks up a localized string similar to You can not CloneDeep because the object is open or drawing, please close or end drawing first..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.CheckLayerIsOpened">
            <summary>
              Looks up a localized string similar to The Layer must be opened before you can perform this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.CheckMapEngineCurrentExtentIsNotValid">
            <summary>
              Looks up a localized string similar to The current extent provided is not valid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ClassBreakNumberShouldBeGreaterThanOne">
            <summary>
              Looks up a localized string similar to The ClassBreak Number should be greater than one..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ClassBreaksIsValid">
            <summary>
              Looks up a localized string similar to The class breaks you have provided are invalid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ColorDoesNotExist">
            <summary>
              Looks up a localized string similar to The color you have provided does not exist..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ColumnNumberExceedTotalRowCount">
            <summary>
              Looks up a localized string similar to The parameter column exceeds the total column count..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.CommonImageSourceIsAlreadyOpen">
            <summary>
              Looks up a localized string similar to The ImageSource is already open..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ConnectionStringCannotBeNull">
            <summary>
              Looks up a localized string similar to The connection string can not be null..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.CreateShapeFileFailed">
            <summary>
              Looks up a localized string similar to The creation of the shape file has failed..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.CurrentExtentNotAssigned">
            <summary>
              Looks up a localized string similar to The CurrentExtent property must be set before calling this method. If you want to use a custom extent, please use the static method.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.CustomImageSizeIsNull">
            <summary>
              Looks up a localized string similar to You already choose resize the image by custom size, please set the custom width and height..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DbfColumnsIsEmpty">
            <summary>
              Looks up a localized string similar to The DbfColumns collection is empty, you should add at least one DbfColumn when you create a new shape file..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DecimalDegreeLatitudeOutOfRange">
            <summary>
              Looks up a localized string similar to The decimal degree latitude value you provided was out of range..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DecimalDegreeLongitudeOutOfRange">
            <summary>
              Looks up a localized string similar to The decimal degree longitude value you provided was out of range..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DecimalDegreeSecondsStringNull">
            <summary>
              Looks up a localized string similar to The degreesMinutesSeconds string may not be null or empty..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DecimalLengthInValidForStringColumnType">
            <summary>
              Looks up a localized string similar to DecimalLength is Invalid(it should be 0) for StringColumnType, it only make sense for DoubleColumnType..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DefaultAndCustomStyleDuplicate">
            <summary>
              Looks up a localized string similar to You are trying to use both a default style and the custom styles collection.  You may only use one or the other..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DefaultAndCustomStyleDuplicateForRestrictedLayer">
            <summary>
              Looks up a localized string similar to You are trying to use both a default style and the custom styles collection. If you want to add custom styles, please set RestrictionStyle as RestrictionStyle.UseCustomStyles..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DegreesMinutesSecondsInputError">
            <summary>
              Looks up a localized string similar to The DegreesMinutesSeconds value is invalid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DeleteTransactionError">
            <summary>
              Looks up a localized string similar to The delete transaction failed for an unknown reason..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.DoubleOutOfRange">
            <summary>
              Looks up a localized string similar to The input double value is out of range..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.EditingNotSupported">
            <summary>
              Looks up a localized string similar to You have set IsEditable to true but have not overridden the CommitTransactionCore method.  Please override this the CommitTransactionCore method to prevent this exception..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.EllipseIsNotValid">
            <summary>
              Looks up a localized string similar to The ellipse is not valid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.EnumerationOutOfRange">
            <summary>
              Looks up a localized string similar to The value for the enumeration is not on of the valid values..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.EvalNotInstall">
            <summary>
              Looks up a localized string similar to The evaluation edition has not been installed..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.EvaluationExpired">
            <summary>
              Looks up a localized string similar to The evaluation has expired.  Please contact Mapgenix for purchasing option or an extension to the trial..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ExtentNotIntersectsWithBoundingBox">
            <summary>
              Looks up a localized string similar to The passed extent needs to intersect with the bounding box of the gid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureCollectionIsEmpty">
            <summary>
              Looks up a localized string similar to The collection of Features may not be empty..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureColumnValueDoesNotContainColon">
            <summary>
              Looks up a localized string similar to The feature column values should be entered as string[] {&quot;Key1:Value1&quot;, &quot;Key2:Value2&quot;}.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureIsInvalidInThisStyle">
            <summary>
              Looks up a localized string similar to The feature is invalid in in this style..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureIsNotValid">
            <summary>
              Looks up a localized string similar to The Feature you provided is not valid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureSourceCanNotExecuteSqlQuery">
            <summary>
              Looks up a localized string similar to Executing sql queries is not supported and the user should always check the CanExecuteSqlQueries to ensure the FeatureSource support it before calling..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureSourceCollectionIsEmpty">
            <summary>
              Looks up a localized string similar to There are no FeatureSources..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureSourceColumnCollectionIsEmpty">
            <summary>
              Looks up a localized string similar to The collection of FeatureSourceColumns may not be empty..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureSourceIsAlreadyInTransaction">
            <summary>
              Looks up a localized string similar to The FeatureSource is already in a transaction..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureSourceIsAlreadyOpen">
            <summary>
              Looks up a localized string similar to The FeatureSource is already opened..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureSourceIsNotEditable">
            <summary>
              Looks up a localized string similar to The FeatureSource is not editable..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureSourceIsNotInTransaction">
            <summary>
              Looks up a localized string similar to The FeatureSource is not in a transaction..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FeatureSourceIsNotOpen">
            <summary>
              Looks up a localized string similar to The FeatureSource is not open.   Please call the Open method before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FieldNameIsNotInFeature">
            <summary>
              Looks up a localized string similar to The requested column name is not in the Feature..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FileAccessError">
            <summary>
              Looks up a localized string similar to File access error, you should open the shape file with ReadWrite mode..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FileAlreadyExists">
            <summary>
              Looks up a localized string similar to The file already exists..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FileIsNotExist">
            <summary>
              Looks up a localized string similar to The file specified does not exist..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FileIsSupportedByCommonImageSource">
            <summary>
              Looks up a localized string similar to This file type is not supported..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FileNotSupportedForSql">
            <summary>
              Looks up a localized string similar to One of the fields in the database is not supported by SQL. The first character of this field name must be an alphabetic letter..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.FirstClassBreakValueError">
            <summary>
              Looks up a localized string similar to The first ClassBreak value should be double.MinValue..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GdipLoadImageFromFileError">
            <summary>
              Looks up a localized string similar to GDI+ threw a status error code..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GeoCacheIsNotOpen">
            <summary>
              Looks up a localized string similar to The GeoCache is not open.  Please call the Open method before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GeocanvasIsNotInDrawing">
            <summary>
              Looks up a localized string similar to The GeoCanvas is currently not drawing.  Please call the BeginDraw method before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GeographicUnitNotValidWithGoogle">
            <summary>
              Looks up a localized string similar to The map unit you are using is not compatable with the GoogleLayer .  Make sure you are using Meters and that your projection is 90013 to ensure compatability..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GeographicUnitNotValidWithOpenStreetMap">
            <summary>
              Looks up a localized string similar to The map unit you are using is not compatable with the OpenStreetMap .  Make sure you are using Meters to ensure compatability with OpenStreetMap service..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GeoImageIsNotValid">
            <summary>
              Looks up a localized string similar to The input GeoImage object is not a valid GeoImage type..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GeometriesInvalidExist">
            <summary>
              Looks up a localized string similar to We have found geometries that are invalid according to the SQL Server STIsValid() Function. To automaticly fix these you can call the MakeAllGeometriesValid method. The SQL To Determine which records are invalid:.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GeometrytypeIsWrong">
            <summary>
              Looks up a localized string similar to Geometry type not recognized. .
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GettingSridNotSupported">
            <summary>
              Looks up a localized string similar to The current GeoImage implementation does not support the GetSrid operation..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.GroupLayerIsEmpty">
            <summary>
              Looks up a localized string similar to You must have at least one layer..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.HtmlColorIsInvalid">
            <summary>
              Looks up a localized string similar to The input string HtmlColor is invalid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.IdColumnCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Id column can&apos;t be null or empty..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.IEnumerableIsEmptyOrNull">
            <summary>
              Looks up a localized string similar to The collection may not be empty or null..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ImageInPointStyleCanNotBeNull">
            <summary>
              Looks up a localized string similar to The image property can&apos;t be null..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ImageScaleShouldBiggerThanZero">
            <summary>
              Looks up a localized string similar to The ImageScaled property must be larger than 0..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ImageSourceIsAlreadyOpen">
            <summary>
              Looks up a localized string similar to The ImageSource is already open..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ImageSourceIsNotOpen">
            <summary>
              Looks up a localized string similar to The ImageSource is not open.  Please call the Open method before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.IndexFileAlreadyExists">
            <summary>
              Looks up a localized string similar to Index File already exist, please change the BuildIndexMode if you want to rebuild this index..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.IndexFileIsInvalid">
            <summary>
              Looks up a localized string similar to The format of your index file is not valid, please check. Or you can use BuildIndexFile function to build a new one..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.IndexFileNotExisted">
            <summary>
              Looks up a localized string similar to You don&apos;t have the corresponding idx file for your shape file. You can use the static method ShapeFileFeatureSource.BuildIndexFile() or ShapeFileFeatureLayer.BuildIndexFile()  to build an idx file for the shape file, or you can set the RequireIndex property to false..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.InputGeometryTypeIsNotValid">
            <summary>
              Looks up a localized string similar to Input Geometry Type Is Not Valid.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.InvalidGeometryInMsSqlForSpatialQuery">
            <summary>
              Looks up a localized string similar to There&apos;re some invalid geometry instance in table not valid. About invalid geometry please have a look at http://msdn.microsoft.com/en-us/library/bb933890.aspx website. To solve this problem, we provide MakeAllGeometryValid function to make the invalid geometry to be valid, because of the function updating your data, you need to backup your data before using this function..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.InvalidOperationExceptionError">
            <summary>
              Looks up a localized string similar to Invalid Operation Exception..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.IsNotSupportedNowForProjection">
            <summary>
              Looks up a localized string similar to  is not supported now for projection..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ItemNotFoundInGeoCollectionByItem">
            <summary>
              Looks up a localized string similar to The GeoCollection does not contain the item you specified..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ItemNotFoundInGeoCollectionByKey">
            <summary>
              Looks up a localized string similar to The GeoCollection does not contain the item you specified..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.JpegImageCompressionShouldBeBetweenZeroAndOneHundred">
            <summary>
              Looks up a localized string similar to The value should be between zero and one hundred..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.KeyColorIsNotSupported">
            <summary>
              Looks up a localized string similar to Do not support KeyColor in the specify GeoCanvas..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.LayerDoesNotHaveBoundingBox">
            <summary>
              Looks up a localized string similar to This Layer doesn&apos;t have a boundingBox..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.LayersTypeIsOutOfRange">
            <summary>
              Looks up a localized string similar to The layer type you have provided is not valid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.MapEngineCurrentExtentIsNotValid">
            <summary>
              Looks up a localized string similar to The current extent you have provided is not valid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.MapEngineCurrentExtentIsNull">
            <summary>
              Looks up a localized string similar to The current extent you have provided may not be null..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.MGRSInvalid">
            <summary>
              Looks up a localized string similar to The input MGRS string is invalid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.MrSidGeoImageSourceIsAlreadyOpen">
            <summary>
              Looks up a localized string similar to The MrSidGeoImageSource is already open..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.MrSidGeoImageSourceIsNotOpen">
            <summary>
              Looks up a localized string similar to The MrSidGeoImageSource is not open.  Please open it before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.MultiFieldNamesNotSupportedError">
            <summary>
              Looks up a localized string similar to The format of Multi-FieldNames isn&apos;t correct..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.MultiLineCannotReorderForInputParams">
            <summary>
              Looks up a localized string similar to Can&apos;t Reorder for the multi-line because it does not satisfy the reorder condition based on the given startPoint and given tolerance..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.MultiLineInvalidForReorder">
            <summary>
              Looks up a localized string similar to Can&apos;t Reorder for the multi-line because it does not satisfy the reorder condition based on the given tolerance..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.NotAllValidLayersAreOpen">
            <summary>
              Looks up a localized string similar to Not all valid layers are open..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.NotSupported">
            <summary>
              Looks up a localized string similar to This feature is currently not supported..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.NotSupportedFileType">
            <summary>
              Looks up a localized string similar to The file type you provided is currently not supported..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.NotSupportedSqlQueryMode">
            <summary>
              Looks up a localized string similar to The SQL Query mode is not supported..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.NumberShouldBeByte">
            <summary>
              Looks up a localized string similar to The number should be between 0 and 255.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ParameterCanNotConvert">
            <summary>
              Looks up a localized string similar to We cannot get the AreaUnit from input unit..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ParameterIdsIsNotIntegers">
            <summary>
              Looks up a localized string similar to Parameter Ids should be from 1 to the record number in ShapeFileFeatureSource.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ParameterIsEmpty">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be empty..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ParameterIsInvalid">
            <summary>
              Looks up a localized string similar to The shape you provided does not pass our simple validation..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ParameterIsNull">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be null..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ParameterIsTransparent">
            <summary>
              Looks up a localized string similar to The parameter is transparent..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.PrinterLayerGeographyUnitDoesNotSupported">
            <summary>
              Looks up a localized string similar to Printer layer supports Feet or Meter only.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ProjectionInitializationError">
            <summary>
              Looks up a localized string similar to Projection initialization failed..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ProjectionInternalGeographyIsUnknown">
            <summary>
              Looks up a localized string similar to Cannot get the projection’s InternalGeographyUnit, please provide it by overriding the Projection’s GetInternalGeographyUnitCore() method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ProjectionIsNotOpen">
            <summary>
              Looks up a localized string similar to The projection is not open.  Please open it before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RasterLayerDoesNotHaveProjectionInformation">
            <summary>
              Looks up a localized string similar to This RasterLayer does not have projection information embedded in it.  If you wish to avoid this exception you can first check the HasProjectionTextProperty..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RasterSourceNotContainsProjectionInformation">
            <summary>
              Looks up a localized string similar to This RasterSource does not have projection information embedded in it.  If you wish to avoid this exception you can first check the HasProjectionTextProperty..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RebuildDbfFailed">
            <summary>
              Looks up a localized string similar to The rebuild of the DBF failed for an unknown reason.  Please see the inner exception..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RebuildIdxFailed">
            <summary>
              Looks up a localized string similar to The spatial index generation failed for an unknown reason.    Please see the inner exception..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RebuildShapeFileFailed">
            <summary>
              Looks up a localized string similar to the rebuilding of the shape file failed for an unknown reason.    Please see the inner exception..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RecordIsInvalid">
            <summary>
              Looks up a localized string similar to The record is invalid, please call Validate method to check the failed reason..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ReturnTypeNotCorrect">
            <summary>
              Looks up a localized string similar to This operation&apos;s return type is not correct..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ReturnValueIsNull">
            <summary>
              Looks up a localized string similar to Return value is null..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RingShapeIsInvalidForOperationVertexCountLessThan4">
            <summary>
              Looks up a localized string similar to This ring is not closed.  To close a ring the last point must be the same as the first point.  All rings must have at least four points..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RotateNotSupported">
            <summary>
              Looks up a localized string similar to Rotation is not supported on this class..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RowNumberExceedTotalRowCount">
            <summary>
              Looks up a localized string similar to The parameter row exceeds the total row count..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.RtreeSpatialIndexIsNotOpen">
            <summary>
              Looks up a localized string similar to The RtreeSpatialIndex is not open.   Please call the Open method before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ShapeFileBoundingBoxIsValid">
            <summary>
              Looks up a localized string similar to The shape file bounding box is invalid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ShapefileFeatureSourceIdNotFromZero">
            <summary>
              Looks up a localized string similar to The Shapefile Id is one based, zero is an invalid Id..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ShapeFileInnerRingNotContainedInOuterRing">
            <summary>
              Looks up a localized string similar to An InnerRing doesn&apos;t contained in any OuterRing. .
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ShapeFileNameIsInvalid">
            <summary>
              Looks up a localized string similar to The shape file name is invalid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ShapeIsInvalidForOperation">
            <summary>
              Looks up a localized string similar to The shape you provided does not pass our simple validation..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ShapeIsInvalidForValidation">
            <summary>
              Looks up a localized string similar to There are no points in the shape..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ShapeTypeNotImplement">
            <summary>
              Looks up a localized string similar to This shape has not been implemented yet..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.ShxFileIsNotOpen">
            <summary>
              Looks up a localized string similar to The shape file index is not open..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.SpatialIndexIsNotRemovable">
            <summary>
              Looks up a localized string similar to The features in SpatialIndex are not removable..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.SridIsInvalid">
            <summary>
              Looks up a localized string similar to Input srid is not valid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.StreamIsNotWritable">
            <summary>
              Looks up a localized string similar to Stream is not writable..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.StringIsNotBlank">
            <summary>
              Looks up a localized string similar to The input string value is not blank..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.TabIndexFileNotExisted">
            <summary>
              Looks up a localized string similar to The corresponding idx/ids file cannot be found. Please use the static method TabFeatureSource.BuildIndexFile() or TabFeatureLayer.BuildIndexFile() to build the idx/ids file, which can greatly improve the querying performance. If the RequireIndex Property is set to false, the idx/ids files will not be checked and an internal spatial index will be created instead..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.TargetShapeIsNotValidType">
            <summary>
              Looks up a localized string similar to Target Shape Is Not Valid Type..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.TheFieldTtypeShouldBeNumeric">
            <summary>
              Looks up a localized string similar to The field type should be numeric..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.TheFormatOfImageIsNotSupported">
            <summary>
              Looks up a localized string similar to The format of the image is not supported..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.TheValueShouldBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to The value should be greater than zero..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.Unlicensed">
            <summary>
              Looks up a localized string similar to Unlicensed..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.UnsupportedEditingShapeType">
            <summary>
              Looks up a localized string similar to Currently we do not support editing this kind of shape type. Shape type:.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.UpdateTansactionError">
            <summary>
              Looks up a localized string similar to The update transaction failed for an unknown reason..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.UriNotValid">
            <summary>
              Looks up a localized string similar to The input Uri is not valid.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.UseGeoTiffRasterInstead">
            <summary>
              Looks up a localized string similar to The TIFF files(.tif or .tiff) are not supported in GdiPlusRasterSource any longer, please use the GeoTiffRasterSource instead..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WkbIsInvalid">
            <summary>
              Looks up a localized string similar to The format of the well known binary is incorrect..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WkbIsNotValidForDrawing">
            <summary>
              Looks up a localized string similar to The well known binary is not valid for drawing..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WkbTypeError">
            <summary>
              Looks up a localized string similar to The well known binary type is incorrect..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WktFormatIsWrong">
            <summary>
              Looks up a localized string similar to The format of the well known text is incorrect..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsCRSNotSet">
            <summary>
              Looks up a localized string similar to Coordinate Reference System not set..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsCRSNotSupport">
            <summary>
              Looks up a localized string similar to This CRS is not supported in the Wms server: .
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsGetMapTimeOut">
            <summary>
              Looks up a localized string similar to The Wms server has timed out..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsLayerDoesNotExists">
            <summary>
              Looks up a localized string similar to The Wms request LAYERS parameter is missing..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsNoLayerExists">
            <summary>
              Looks up a localized string similar to No layers exist in the Service Description..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsRequestParaNotExists">
            <summary>
              Looks up a localized string similar to The requested parameter does not exists in this Service Description..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsServerNotSupportFormat">
            <summary>
              Looks up a localized string similar to This image format is not supported in the Wms server: .
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsServerNotSupportLayer">
            <summary>
              Looks up a localized string similar to This layer is not supported in the Wms server: .
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsServerNotSupportStyle">
            <summary>
              Looks up a localized string similar to This style is not supported in the Wms server: .
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WmsStyleDoesNotExists">
            <summary>
              Looks up a localized string similar to The Wms request STYLES parameter is missing..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WorldExtentIsNotValid">
            <summary>
              Looks up a localized string similar to The world extent is not valid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WorldFileShould6Lines">
            <summary>
              Looks up a localized string similar to World file should has 6 lines..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WpfCommonGeoImageSourceIsAlreadyOpen">
            <summary>
              Looks up a localized string similar to The ImageSource is already open..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.ExceptionDescription.WpfCommonGeoImageSourceIsNotOpen">
            <summary>
              Looks up a localized string similar to The ImageSource is not opened.  Please open it before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.ByteOrderError">
            <summary>
              Looks up a localized string similar to CPLVerifyConfiguration(): byte order set wrong.\n.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CPLCallocException">
            <summary>
              Looks up a localized string similar to CPLCalloc(): Out of memory allocating {0:d} bytes.\n.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CplConvFile">
            <summary>
              Looks up a localized string similar to CplConv.cs.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CPLCSV">
            <summary>
              Looks up a localized string similar to CPL_CSV.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CPLDeaccess">
            <summary>
              Looks up a localized string similar to CPLDeaccess( {0} ) - no match..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CplDebug">
            <summary>
              Looks up a localized string similar to CPL_DEBUG.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CPLDumpSharedListStr">
            <summary>
              Looks up a localized string similar to {0,2:d} {1} {2,4} {3}.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CplError">
            <summary>
              Looks up a localized string similar to CPLError.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CPLErrorFileName">
            <summary>
              Looks up a localized string similar to CPLError.cs.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CPLErrorLine">
            <summary>
              Looks up a localized string similar to 141.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CplLogErrors">
            <summary>
              Looks up a localized string similar to CPL_LOG_ERRORS.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CPLLogFile">
            <summary>
              Looks up a localized string similar to CPL_LOG.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CplTimeStamp">
            <summary>
              Looks up a localized string similar to CPL_TIMESTAMP.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.CSLLoad">
            <summary>
              Looks up a localized string similar to CSLLoad({0}).
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to The specify directory not found.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.DisastrousError">
            <summary>
              Looks up a localized string similar to Disastrous error for current program.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.EnumerationOutOfRange">
            <summary>
              Looks up a localized string similar to The value for the enumeration is not on of the valid values..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.EnumerationOutOfRange1">
            <summary>
              Looks up a localized string similar to The value for the enumeration is not on of the valid values..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.EvaluationExpired">
            <summary>
              Looks up a localized string similar to Evaluation Expired..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.EvaluationExpired1">
            <summary>
              Looks up a localized string similar to Evaluation Expired..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FailedUnlink">
            <summary>
              Looks up a localized string similar to Failed to unlink {0}.\n.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FeatureSourceIsNotEditable">
            <summary>
              Looks up a localized string similar to The FeatureSource is not editable..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FeatureSourceIsNotEditable1">
            <summary>
              Looks up a localized string similar to The FeatureSource is not editable..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FeatureSourceIsNotInTransaction">
            <summary>
              Looks up a localized string similar to The FeatureSource is not in a transaction..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FeatureSourceIsNotInTransaction1">
            <summary>
              Looks up a localized string similar to The FeatureSource is not in a transaction..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FeatureSourceIsNotOpen">
            <summary>
              Looks up a localized string similar to The FeatureSource is not open.   Please call the Open method before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FeatureSourceIsNotOpen1">
            <summary>
              Looks up a localized string similar to The FeatureSource is not open.   Please call the Open method before calling this method..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FileAlreadyExists">
            <summary>
              Looks up a localized string similar to The file already exists..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FileAlreadyExists1">
            <summary>
              Looks up a localized string similar to The file already exists..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FileIsNotExist">
            <summary>
              Looks up a localized string similar to The file specified does not exist..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FileIsNotExist1">
            <summary>
              Looks up a localized string similar to The file specified does not exist..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FileNotFound">
            <summary>
              Looks up a localized string similar to The specify file not found,check the filename and path please.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.FileSystemObjNoExist">
            <summary>
              Looks up a localized string similar to It seems no file system object called {0} exists..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.OpenedFileCount">
            <summary>
              Looks up a localized string similar to {0} Shared files open..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.OutOfMemoryError">
            <summary>
              Looks up a localized string similar to CPLMalloc(): Out of memory allocating {0} bytes.\n.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.OutOfRange">
            <summary>
              Looks up a localized string similar to the value out of range.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.ParameterIsNull">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be null..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.ParameterIsNull1">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be null..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.ReadFileFailed">
            <summary>
              Looks up a localized string similar to Read of file {0} failed..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.ReallocFail">
            <summary>
              Looks up a localized string similar to CPLRealloc(): Out of memory allocating {0} bytes.\n.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.SillySize">
            <summary>
              Looks up a localized string similar to CPLMalloc({0}): Silly size requested.\n.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.StrFormat">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.String">
            <summary>
              Looks up a localized string similar to MitabExceptionDescription.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.SystemError">
            <summary>
              Looks up a localized string similar to The client system is not Win32 system.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.SystemName">
            <summary>
              Looks up a localized string similar to Win32.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.TabFileHandleIsNull">
            <summary>
              Looks up a localized string similar to Please open the tab file before getting the projection information..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.TabFileNameIsInvalid">
            <summary>
              Looks up a localized string similar to The tab file name is invalid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.TabFileNameIsInvalid1">
            <summary>
              Looks up a localized string similar to The tab file name is invalid..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.ThreadSlotError">
            <summary>
              Looks up a localized string similar to Thread Local Store Slot fulled or it over limited.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.UnableFindFile">
            <summary>
              Looks up a localized string similar to Unable to find file handle {0} in CPLCloseShared()..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.UnlinkFailed">
            <summary>
              Looks up a localized string similar to Failed to unlink {0}.\nUnrecognised filesystem object..
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.VarSizeError">
            <summary>
              Looks up a localized string similar to sizeof(GInt32) == {0:d} ... yow!\n.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.VSIDebug3VSIOpen">
            <summary>
              Looks up a localized string similar to VSIFOpen({0},{1}) = {2}.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.VSIFRead">
            <summary>
              Looks up a localized string similar to VSIFRead({0},{1}) = {2}.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.VSIFTell">
            <summary>
              Looks up a localized string similar to VSIFTell({0}) = {1}d.
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.Properties.MitabExceptionDescription.VSIRewind">
            <summary>
              Looks up a localized string similar to VSIRewind({0}).
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.QueryTools">
            <summary>Wrapper class for executing queries.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.QueryTools.CanExecuteSqlQuery">
            <summary>Whether FeatureSource can excute a SQL query or not.
            If it is false, it throws an exception when the following APIs are called: ExecuteScalar, ExecuteNonQuery, ExecuteQuery</summary>
            <remarks>The default implementation is false.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.ExecuteNonQuery(System.String)">
             <summary>Executes a SQL statement against a connection object.</summary>
             <returns>Number of rows affected.</returns>
             <remarks>Use ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database
            objects such as tables), or to change the data in a database by executing UPDATE, INSERT, or DELETE statements.</remarks>
             <param name="sqlStatement">The sqlStatement to be excuted.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.ExecuteScalar(System.String)">
            <summary>Executes the query and returns the first column of the first row in the result
            set returned by the query. All other columns and rows are ignored.</summary>
            <returns>The first column of the first row in the result set.</returns>
            <remarks>Use the ExcuteScalar method to retrieve a single value from the database. This
            requires less code than use the ExcuteQuery method and then performing the operations
            necessary to generate the single value using the data.</remarks>
            <param name="sqlStatement">SQL statement to be excuted.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesByColumnValue(System.String,System.String)">
            <summary>Returns a collection of features according to a column value.</summary>
            <returns>Collection of features according to a column value.</returns>
            <param name="columnName">Name of the column.</param>
            <param name="columnValue">Value of the column.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesContaining(Mapgenix.Shapes.BaseShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns collection of features containing the target shape.</summary>
            <returns>Collection of features containing the target shape</returns>
            <remarks>If there is a current transaction and it is marked as live, then the result
            includes any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape used in the spatial query.</param>
            <param name="returningColumnNames">Columns contained in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesContaining(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns collection of features containing the target shape.</summary>
            <returns>Collection of features containing the target shape</returns>
            <remarks>If there is a current transaction and it is marked as live, then the result
            includes any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape used in the spatial query.</param>
            <param name="returningColumnsType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesContaining(Mapgenix.Shapes.Feature,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns collection of features containing the target shape.</summary>
            <returns>Collection of features containing the target shape</returns>
            <remarks>If there is a current transaction and it is marked as live, then the result
            includes any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape used in the spatial query.</param>
            <param name="returningColumnNames">Columns contained in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesCrossing(Mapgenix.Shapes.BaseShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that cross the target shape.</summary>
            <returns>Collection of features that cross the target shape.</returns>
            <param name="targetShape">Target shape used in the spatial query.</param>
            <param name="returningColumnNames">Columns contained in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesCrossing(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features that cross the target shape.</summary>
            <returns>Collection of features that cross the target shape.</returns>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNamesType">Column name type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesCrossing(Mapgenix.Shapes.Feature,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that cross the target shape.</summary>
            <returns>Collection of features that cross the target shape.</returns>
            <param name="targetShape">Target shape used in the spatial query.</param>
            <param name="returningColumnNames">Columns contained in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesDisjointed(Mapgenix.Shapes.BaseShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that disjoint the target Feature.</summary>
            <returns>Collection of features that disjoint the target Feature.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNames">Columns contained in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesDisjointed(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features that disjoint the target Feature.</summary>
            <returns>Collection of features that disjoint the target Feature.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesDisjointed(Mapgenix.Shapes.Feature,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that disjoint the target Feature.</summary>
            <returns>Collection of features that disjoint the target Feature.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNames">Columns contained in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesIntersecting(Mapgenix.Shapes.BaseShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that intersect the target Feature.</summary>
            <returns>Collection of features that intersect the target Feature.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNames">Columns contained in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesIntersecting(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features that intersect the target Feature.</summary>
            <returns>Collection of features that intersect the target Feature.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesIntersecting(Mapgenix.Shapes.Feature,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that intersect the target Feature.</summary>
            <returns>Collection of features that intersect the target Feature.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNames">Columns contained in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesOverlapping(Mapgenix.Shapes.BaseShape,System.Collections.Generic.IEnumerable{System.String})">
             <summary>Returns a collection of features that overlap the target Feature.</summary>
             <returns>Collection of features that overlap the target Feature.</returns>
             <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
             <param name="targetShape">Target shape.</param>
             <param name="returningColumnNames">Column values in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesOverlapping(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.ReturningColumnsType)">
             <summary>Returns a collection of features that overlap the target Feature.</summary>
             <returns>Collection of features that overlap the target Feature.</returns>
             <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
             <param name="targetShape">Target shape.</param>
             <param name="returningColumnType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesOverlapping(Mapgenix.Shapes.Feature,System.Collections.Generic.IEnumerable{System.String})">
             <summary>Returns a collection of features that overlap the target Feature.</summary>
             <returns>Collection of features that overlap the target Feature.</returns>
             <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
             <param name="targetShape">Target shape.</param>
             <param name="returningColumnNames">Column values in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesTopologicalEqual(Mapgenix.Shapes.BaseShape,System.Collections.Generic.IEnumerable{System.String})">
             <summary>Returns collection of features topologically equal to the target shape.</summary>
             <returns>Collection of features topologically equal to the target shape.</returns>
             <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
             <param name="targetShape">Target shape.</param>
             <param name="returningColumnNames">Column values in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesTopologicalEqual(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.ReturningColumnsType)">
             <summary>Returns ollection of features topologically equal to the target shape.</summary>
             <returns>Collection of features topologically equal to the target shape.</returns>
             <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
             <param name="targetShape">Target shape.</param>
             <param name="returningColumnNamesType">Column values in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesTopologicalEqual(Mapgenix.Shapes.Feature,System.Collections.Generic.IEnumerable{System.String})">
             <summary>Returns ollection of features topologically equal to the target shape.</summary>
             <returns>Collection of features topologically equal to the target shape.</returns>
             <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
             <param name="targetShape">Target shape.</param>
             <param name="returningColumnNamesType">Column values in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesTouching(Mapgenix.Shapes.BaseShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that touch the target shape.</summary>
            <returns>Collection of features that touch the target shape.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNames">Column values in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesTouching(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features that touch the target shape.</summary>
            <returns>Collection of features that touch the target shape.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesTouching(Mapgenix.Shapes.Feature,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that touch the target shape.</summary>
            <returns>Collection of features that touch the target shape.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetFeature">Target feature.</param>
            <param name="returningColumnNames">Column names in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesWithin(Mapgenix.Shapes.BaseShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that are within the target Feature.</summary>
            <returns>Collection of features that are within the target Feature.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNames">Column names in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesWithin(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features that are within the target Feature.</summary>
            <returns>Collection of features that are within the target Feature.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesWithin(Mapgenix.Shapes.Feature,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that are within the target Feature.</summary>
            <returns>Collection of features that are within the target Feature.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
            will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Target shape.</param>
            <param name="returningColumnNames">Column names in the returned features.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesNearestTo(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a user defined number collection of features that are closest to the TargetShape.</summary>
            <returns>User defined number collection of features that are closest to the TargetShape.</returns>
            <remarks>It is important to note that the TargetShape and the FeatureSource
                must be in the same unit, such as feet or meters. If there is a current transaction and it is marked as live, then
                the results will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Shape to find nearest features from.</param>
            <param name="unitOfData">Unit of data that the TargetShape and the FeatureSource are in, such as feet, meters, etc.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNames">Column names to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesNearestTo(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,System.Int32,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a user defined number collection of features that are closest to the TargetShape.</summary>
            <returns>User defined number collection of features that are closest to the TargetShape.</returns>
            <remarks>It is important to note that the TargetShape and the FeatureSource
                must be in the same unit, such as feet or meters. If there is a current transaction and it is marked as live, then
                the results will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Shape to find nearest features from.</param>
            <param name="unitOfData">Unit of data that the TargetShape and the FeatureSource are in, such as feet, meters, etc.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesNearestTo(Mapgenix.Shapes.Feature,Mapgenix.Shapes.GeographyUnit,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a user defined number collection of features that are closest to the TargetShape.</summary>
            <returns>User defined number collection of features that are closest to the TargetShape.</returns>
            <remarks>It is important to note that the TargetShape and the FeatureSource
                must be in the same unit, such as feet or meters. If there is a current transaction and it is marked as live, then
                the results will include any transaction Feature that applies.</remarks>
            <param name="targetShape">Shape to find nearest features from.</param>
            <param name="unitOfData">Unit of data that the TargetShape and the FeatureSource are in, such as feet, meters, etc.</param>
            <param name="maxItemsToFind">Maximum number of features to find.</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesWithinDistanceOf(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that are within a certain distance of a TargetShape.</summary>
            <returns>Collection of features that are within a certain distance of a TargetShape</returns>
            <remarks> It is important to note that the TargetShape and the
                FeatureSource must use the same unit, such as feet or meters. If there is a current transaction and
                it is marked as live, then the results will include any transaction Feature that
                applies.</remarks>
            <param name="targetShape">Shape to find features within a distance of.</param>
            <param name="unitOfData">Unit of data that the FeatureSource and TargetShape are in.</param>
            <param name="distanceUnit">Unit of the distance parameter, such as feet, miles, kilometers, etc.</param>
            <param name="distance">Distance</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesWithinDistanceOf(Mapgenix.Shapes.BaseShape,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit,System.Double,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features that are within a certain distance of a TargetShape.</summary>
            <returns>Collection of features that are within a certain distance of a TargetShape</returns>
            <remarks> It is important to note that the TargetShape and the
                FeatureSource must use the same unit, such as feet or meters. If there is a current transaction and
                it is marked as live, then the results will include any transaction Feature that
                applies.</remarks>
            <param name="targetShape">Shape to find features within a distance of.</param>
            <param name="unitOfData">Unit of data that the FeatureSource and TargetShape are in.</param>
            <param name="distanceUnit">Unit of the distance parameter, such as feet, miles, kilometers, etc.</param>
            <param name="distance">Distance</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesWithinDistanceOf(Mapgenix.Shapes.Feature,Mapgenix.Shapes.GeographyUnit,Mapgenix.Shapes.DistanceUnit,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features that are within a certain distance of a TargetShape.</summary>
            <returns>Collection of features that are within a certain distance of a TargetShape</returns>
            <remarks> It is important to note that the TargetShape and the
                FeatureSource must use the same unit, such as feet or meters. If there is a current transaction and
                it is marked as live, then the results will include any transaction Feature that
                applies.</remarks>
            <param name="targetShape">Shape to find features within a distance of.</param>
            <param name="unitOfData">Unit of data that the FeatureSource and TargetShape are in.</param>
            <param name="distanceUnit">Unit of the distance parameter, such as feet, miles, kilometers, etc.</param>
            <param name="distance">Distance</param>
            <param name="returningColumnNames">Column name.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeatureById(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns an feature based on an Id provided.</summary>
            <returns>Feature based on an Id provided..</returns>
            <param name="id">Unique Id for the feature to find.</param>
            <param name="returningColumnNames">Column names returned with the Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeatureById(System.String,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns an feature based on an Id provided.</summary>
            <returns>Feature based on an Id provided..</returns>
            <param name="id">Unique Id for the feature to find.</param>
            <param name="returningColumnNamesType">Column type..</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesInsideBoundingBox(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features inside of the target rectangle.</summary>
            <returns>Collection of features inside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesInsideBoundingBox(Mapgenix.Shapes.RectangleShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features inside of the target rectangle.</summary>
            <returns>Collection of features inside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesOutsideBoundingBox(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features outside of the target rectangle.</summary>
            <returns>Collection of features outside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNames">Column names.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetFeaturesOutsideBoundingBox(Mapgenix.Shapes.RectangleShape,Mapgenix.Shapes.ReturningColumnsType)">
            <summary>Returns a collection of features outside of the target rectangle.</summary>
            <returns>Collection of features outside of the target rectangle.</returns>
            <remarks>If there is a current transaction and it is marked as live, then the results
                will include any transaction Feature that applies.</remarks>
            <param name="boundingBox">Target boundingBox.</param>
            <param name="returningColumnNamesType">Column type.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetColumns">
            <summary>Returns the collection of columns for this FeatureSource.</summary>
            <returns>Collection of columns for this FeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetCount">
            <summary>Returns the count of the features in  FeatureSource.</summary>
            <returns>Count of the features in  FeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetAllFeatures(Mapgenix.Shapes.ReturningColumnsType)">
            <remarks>Returns whatever is returned by the GetAllFeaturesCore method, along with any of the additions or
            subtractions made if you are in a transaction and that transaction is configured to be live.</remarks>
            <summary>Returns the collection of all the features in the FeatureSource.</summary>
            <returns>Collection of all the features in the FeatureSource.</returns>
            <param name="returningColumnNames">Column type</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetAllFeatures(System.Collections.Generic.IEnumerable{System.String})">
            <remarks>Returns whatever is returned by the GetAllFeaturesCore method, along with any of the additions or
            subtractions made if you are in a transaction and that transaction is configured to be live.</remarks>
            <summary>Returns the collection of all the features in the FeatureSource.</summary>
            <returns>Collection of all the features in the FeatureSource.</returns>
            <param name="returningColumnNames">Column names</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.ExecuteQuery(System.String)">
            <summary>Executes query and returns the result.</summary>
            <returns>Result set in the format of dataTable.</returns>
            <remarks>
            Use the ExcuteScalar method to retrieve a single value from the database. This
            requires less code than use the ExcuteQuery method and then performing the operations
            necessary to generate the single value using the data.
            </remarks>
            <param name="sqlStatement">The SQL statement to execute.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetBoundingBoxById(System.String)">
            <summary>Returns the bounding box for a feature with Id specified.</summary>
            <returns>Bounding box for a feature with Id specified.</returns>
            <param name="id">Unique Id of the feature to find the bounding box.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.QueryTools.GetBoundingBoxesByIds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of bounding boxes for the features with Id specified.</summary>
            <returns>Collection of bounding boxes for the features with Id specified.</returns>
            <param name="ids">Collection of unique Ids of the features to find the bounding box.</param>
        </member>
        <member name="T:Mapgenix.FeatureSource.ShapeFileFeatureSource">
            <summary>FeatureSource for ESRI shapefile.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.ShapeFileFeatureSource.ShapePathFileName">
            <summary>Returns the path and file of the shapefile to use.</summary>
            <returns>Path and file of the shapefile to use.</returns>
        </member>
        <member name="P:Mapgenix.FeatureSource.ShapeFileFeatureSource.IndexPathFileName">
            <summary>Gets and sets the path and file of the spatial index to use.</summary>
            <returns>Path and file of the spatial index to use.</returns>
        </member>
        <member name="P:Mapgenix.FeatureSource.ShapeFileFeatureSource.IsEditable">
            <summary>Returns true if ShapefileFeatureSource allows editing or false if is read only.</summary>
            <returns>True if ShapefileFeatureSource allows editing or false if is read only.</returns>
        </member>
        <member name="P:Mapgenix.FeatureSource.ShapeFileFeatureSource.CanExecuteSqlQueryCore">
            <summary>Can excute sql query or not.
            If it is false, it throws exception when callling the APIs:ExecuteScalar,ExecuteNonQuery,ExecuteQuery.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.ShapeFileFeatureSource.RequireIndex">
            <summary>Gets and sets if shapefile requires spatial index when reading data. The default value is true.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.ShapeFileFeatureSource.MaxRecordsToDraw">
            <summary>Gets and sets the maximum number of records that can be drawn.</summary>
        </member>
        <member name="E:Mapgenix.FeatureSource.ShapeFileFeatureSource.StreamLoading">
            <summary>Allows to pass in own stream representing the files.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.OnStreamLoading(Mapgenix.Utils.StreamLoadingEventArgs)">
            <summary>Allows to raise the StreamLoading event.</summary>
            <returns>None</returns>
            <param name="e">Event arguments for the StreamLoading event.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetDbfColumns">
            <summary>Gets the dbf columns out from the shapefile featureSource.</summary>
            <returns>Collection of dbfColumns in the shapefile FeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.AddColumnInteger(System.String,System.Int32)">
            <summary>Adds a new Integer column to the DBF file associated with the shapefile.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="columnName">Column to add.</param>
            <param name="length">Length of the integer.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetDataFromDbf(System.String,System.String)">
            <summary>Gets data directly from the DBF file associated with the shapefile.</summary>
            <overloads>Passes an Id and a column name.</overloads>
            <returns>Data directly from the DBF file associated with the shapefile.</returns>
            <param name="id">Id for the Feature to find.</param>
            <param name="columnName">Column name.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetDataFromDbf(System.String)">
            <summary>Gets data directly from the DBF file associated with the shapefile.</summary>
            <returns>Dictionary holding all of the values from the DBF for the Id specified.</returns>
            <param name="id">Id of the Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetDataFromDbf(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets data directly from the DBF file associated with the shapefile.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetDataFromDbf(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets data directly from the DBF file associated with the shapefile.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.UpdateDbfData(System.String,System.String,System.String)">
            <summary>Updates data in the DBF file associated with the shapefile.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="id">Id of the feature to update.</param>
            <param name="columnName">Column name to update.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.ExecuteNonQueryCore(System.String)">
            <summary>Executes a SQL query returning the number of records affected.</summary>
            <returns>Number of records affected by the SQL query.</returns>
            <param name="sqlStatement">SQL statement to execute.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.ExecuteQueryCore(System.String)">
            <summary>Returns a DataTable based on the SQL statement provided.</summary>
            <returns>DataTable based on the SQL statement you provided.</returns>
            <param name="sqlStatement">SQL statement to execute.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.OpenCore">
            <summary>Opens the ShapefileFeatureSource to have it ready to use.</summary>
            <returns>None</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.CloseCore">
            <summary>Closes the ShapefileFeatureSource.</summary>
            <returns>None</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.CommitTransactionCore(Mapgenix.FeatureSource.TransactionBuffer)">
            <summary>Commits the existing transaction to its underlying source of data.</summary>
            <returns>TransactionResult with the status of the committed transaction including how many successfull updates,
            adds, and deletes and any error encountered.</returns>
            <param name="transactions">Transaction buffer encapsulating all of the actions (adds, edits and deletes) making up the
            transaction.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetAllFeaturesCore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection with all the features in the ShapefileFeatureSource.</summary>
            <returns>Collection with all the features in the ShapefileFeatureSource.</returns>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetColumnsCore">
            <summary>Returns the columns available for the ShapefileFeatureSource.</summary>
            <returns>Columns available in the ShapefileFeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetBoundingBoxCore">
            <summary>Returns the bounding box encompassing all of the features in the ShapefileFeatureSource.</summary>
            <returns>Bounding box encompassing all of the features in the ShapefileFeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetFeaturesOutsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <returns>Returns collection of Features of the ShapefileFeatureSource outside a bounding box.</returns>
            <summary>Collection of Features of the ShapefileFeatureSource outside a bounding box.</summary>
            <param name="boundingBox">Bounding box used to find the features outside.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetFeaturesInsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <returns>Returns collection of Features of the ShapefileFeatureSource inside a bounding box.</returns>
            <summary>Collection of Features of the ShapefileFeatureSource inside a bounding box.</summary>
            <param name="boundingBox">Bounding box used to find the features inside.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetFeaturesForDrawingCore(Mapgenix.Shapes.RectangleShape,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features used for drawing.</summary>
            <returns>Collection of features used for drawing.</returns>
            <param name="boundingBox">Bounding box of where to draw the features.</param>
            <param name="screenWidth">Width in screen pixels of the canvas to draw on.</param>
            <param name="screenHeight">Height in screen pixels of the canvas to draw on.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetFeaturesByIdsCore(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features based on Ids.</summary>
            <returns>Collection of features based on Ids.</returns>
            <param name="ids">Ids uniquely identifying the features in the ShapefileFeatureSource.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.ShapeFileFeatureSource.GetCountCore">
            <summary>Returns the number of records in the ShapefileFeatureSource.</summary>
            <returns>Number of records in the ShapefileFeatureSource.</returns>
        </member>
        <member name="T:Mapgenix.FeatureSource.TransactionResult">
            <summary>Results from a processed transaction.</summary>
            <remarks>Holds the results of a transaction such as the number
            of succeeded record and the number of failed records, a dictionary with reasons of failing by FeatureId.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionResult.#ctor">
            <summary>Class constructor.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.TransactionResult.#ctor(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},Mapgenix.FeatureSource.TransactionResultStatus)">
            <summary>Class constructor.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.TransactionResult.TotalSuccessCount">
            <summary>Gets and sets the total number of records committed successfully.</summary>
            <returns>Total number of records committed successfully.</returns>
            <remarks>None</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.TransactionResult.TotalFailureCount">
            <summary>Gets and sets the total number of records committed unsuccessfully.</summary>
            <returns>Total number of records committed unsuccessfully.</returns>
            <remarks>None</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.TransactionResult.TransactionResultStatus">
            <summary>Gets and sets the result status of the transaction.</summary>
            <returns>Result status of the transaction.</returns>
            <remarks>If all of the records committed fine then a success status is returned. If one or more records failed then a
            failure status is returned though some records have committed successfully.</remarks>
        </member>
        <member name="P:Mapgenix.FeatureSource.TransactionResult.FailureReasons">
            <summary>Gets and sets the dictionary with the reasons for failure.</summary>
            <returns>Dictionary with reasons for failure.</returns>
            <remarks>It is recommended to use the FeatureId as the key of the Dictionary.</remarks>
        </member>
        <member name="T:Mapgenix.FeatureSource.BuildIndexMode">
            <summary>Modes whether an index should be rebuilt or not.</summary>
            <remarks>None</remarks>
        </member>
        <member name="F:Mapgenix.FeatureSource.BuildIndexMode.DoNotRebuild">
            <summary>Do not rebuild the index if it exists.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.BuildIndexMode.Rebuild">
            <summary>Rebuild the index if it exists.</summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.DbfColumnType">
            <summary>Column types in the DBF.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.DbfColumnType.Null">
            <summary>Null</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.DbfColumnType.String">
            <summary>A string type.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.DbfColumnType.Double">
            <summary>8 byte numeric type.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.DbfColumnType.Logical">
            <summary>Logical</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.DbfColumnType.Integer">
            <summary>8 byte numeric type.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.DbfColumnType.Memo">
            <summary>10 digit pointer to memo file.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.DbfColumnType.Date">
            <summary>Date in format - YYYYMMDD</summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ExecutingSqlStatementType">
            <summary>
            Parameters passed in through the ExecutingSqlStatement event in MsSql2008FeatureSource.
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.OverwriteMode">
            <summary>
            Whether a file should be overwrite or not if the file exists.
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.QueryType">
            <summary>Types of spatial query is executed against a FeatureSource.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.QueryType.Disjoint">
            <summary>The current shape and the targetShape have no points in common.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.QueryType.Intersects">
            <summary>The current shape and the targetShape have at least one point in common.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.QueryType.Touches">
            <summary>
            The current shape and the targetShape have at least one boundary point in common,
            but no interior points.
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.QueryType.Crosses">
            <summary>
            The current shape and the targetShape share some but not all interior
            points.
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.QueryType.Within">
            <summary>The current shape lies within the interior of the targetShape.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.QueryType.Contains">
            <summary>The targetShape lies within the interior of the current shape.</summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.QueryType.Overlaps">
            <summary>
            The current shape and the targetShape share some but not all points in
            common.
            </summary>
        </member>
        <member name="F:Mapgenix.FeatureSource.QueryType.TopologicalEqual">
            <summary>The current shape and the target Shape are topologically equal.</summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ReadWriteMode">
            <summary>
            Enumeration for Dbf read write mode
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.ShapeFileType">
            <summary>Types of shapefile.</summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.SpatialDataType">
            <summary>
            Spatial data type in
            <strong>MsSql2008FeatureSource</strong>.
            </summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.TransactionResultStatus">
            <summary>This enumeration for result from a FeatureSource transaction.</summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.WfsNamespace">
            <summary>Wfs namespaces.</summary>
        </member>
        <member name="T:Mapgenix.FeatureSource.WfsFeatureSource">
            <summary>FeatureSource from WFS (Web Feature Service)</summary>
            <remarks>To get features from an WFS server.</remarks>
        </member>
        <member name="F:Mapgenix.FeatureSource.WfsFeatureSource._inMemoryFeatures">
            <summary>
            Features load from wfs GetFeature request
            </summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.WfsFeatureSource.ServiceLocationUrl">
            <summary>Url of WFS service.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.WfsFeatureSource.TypeName">
            <summary>Typename of the WFS service.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.WfsFeatureSource.LastXmlResponse">
            <summary>Last response in XML format. It is passed out by RequestedData event as a parameter.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.WfsFeatureSource.TimeoutInSeconds">
            <summary>Timeout of the web request in seconds.  The default timeout value is 20 seconds.</summary>
        </member>
        <member name="P:Mapgenix.FeatureSource.WfsFeatureSource.WebProxy">
            <summary>Gets or sets the proxy used for requesting a Web Response.</summary>
        </member>
        <member name="E:Mapgenix.FeatureSource.WfsFeatureSource.RequestingData">
            <summary>Called before the requesting data by url from the WFS server.</summary>
            <remarks>This event is called before requesting data by url from the WFS server.</remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.OnRequestingData(Mapgenix.FeatureSource.WfsRequestEventArgs)">
            <returns>None</returns>
            <summary>To raise the RequestingData event from a derived class.</summary>
            <param name="wfsRequestEventArgs">Event arguments defining the parameters passed to the
            recipient of the event.</param>
        </member>
        <member name="E:Mapgenix.FeatureSource.WfsFeatureSource.RequestedData">
            <summary>Called after requesting data by url from the WFS server.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.OnRequestedData(Mapgenix.FeatureSource.WfsResponseEventArgs)">
            <summary>Raises the RequestedData event from a derived class.</summary>
            <param name="wfsResponseEventArgs">Event arguments defining the parameters passed to the
            recipient of the event.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.OpenCore">
            <summary>Opens the WfsFeatureSource to have it ready to use.</summary>
            <returns>None</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.CloseCore">
            <summary>Closes the WfsFeatureSource.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.GetBoundingBoxCore">
            <summary>Returns the bounding box encompassing all of the features in the WfsFeatureSource.</summary>
            <returns>Bounding box encompassing all of the features in the WfsFeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.GetColumnsCore">
             <summary>Returns the columns available for the WfsFeatureSource.</summary>
            <returns>Columns available for the WfsFeatureSource.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.GetFeaturesByIdsCore(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features based on Ids.</summary>
            <returns>Collection of features based on Ids.</returns>
            <param name="ids">Ids uniquely identifying the features in the WfsFeatureSource.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.GetAllFeaturesCore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of all the features in the WfsFeatureSource.</summary>
            <returns>Collection of all the features in the WfsFeatureSource.</returns>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.GetFeaturesInsideBoundingBoxCore(Mapgenix.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns a collection of features of the WfsFeatureSource inside a bounding box.</summary>
            <returns>Collection of features of the WfsFeatureSource inside a bounding box.</returns>
            <param name="boundingBox">Bounding box to find the features inside.</param>
            <param name="returningColumnNames">Field names of the column data to return with each Feature.</param>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSource.GetFeaturesByColumnValueCore(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets collection of features by passing a columnName and a specified columValue.</summary>
            <returns>Collection of features matching the columnValue.</returns>
            <param name="columnName">Column name  to match the column value.</param>
            <param name="columnValue">Column value to match those returning features.</param>
            <param name="returningColumnNames">Columns for each feature.</param>
        </member>
        <member name="T:Mapgenix.FeatureSource.WfsFeatureSourceHelper">
            <summary>Static class for operations on OGS WFS services.</summary>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSourceHelper.GetCapabilities(System.String)">
             <summary>Get capabilities from a WFS service url.</summary>
             <returns>XML representing capabilities of the WFS server.</returns>
             <param name="serviceLocationUrl">Url of the WFS service.</param>
             <remarks><para>Every OGC Web Service, including a Web Feature Service, has the ability to describe its capabilities 
             by returning service metadata in response to a GetCapabilities request. 
             Specifically, every WFS must support the KVP encoded form of the GetCapabilities request over HTTP GET in order to let 
             a client know how to obtain a capabilities document.</para>
             <para>
             The capabilities response document contains the following sections:
            1. Service Identification section
            The service identification section provides information about the WFS service itself.
            2. Service Provider section
            The service provider section provides metadata about the organization operating the WFS server.
            3. Operation Metadata section
            The operations metadata section provides metadata about the operations defined in this specification and implemented by a particular WFS server. This metadata includes the DCP, parameters and constraints for each operation.
            4. FeatureType list section
            This section defines the list of feature types (and operations on each feature type) that are available from a web feature service. Additional information, such as the default SRS, any other supported SRSs, or no SRS whatsoever (for non-spatial feature types), for WFS requests is provided for each feature type.
            5. ServesGMLObjectType list section
            This section defines the list of GML Object types, not derived from gml:AbstractFeatureType, that are available from a web feature service that supports the GetGMLObject operation. These types may be defined in a base GML schema, or in an application schema using its own namespace.
            6. SupportsGMLObjectType list section
            The Supports GML Object Type section defines the list of GML Object types that a WFS server would be capable of serving if it was deployed to serve data.
            described by an application schema that either used those GML Object types directly (for non-abstract types), or defined derived types based on those types.
            7. Filter capabilities section
            The schema of the Filter Capabilities Section is defined in the Filter Encoding Implementation Specification [3]. This is an optional section. If it exists, then the WFS should support the operations advertised therein. If the Filter Capabilities Section is not defined, then the client should assume that the server only supports the minimum default set of filter operators.
             </para>
             </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSourceHelper.GetCapabilities(System.Uri)">
             <summary>Get capabilities from a WFS service url.</summary>
             <returns>XML representing capabilities of the WFS server.</returns>
             <param name="serverUri">Url of the WFS service.</param>
             <remarks><para>Every OGC Web Service, including a Web Feature Service, has the ability to describe its capabilities 
             by returning service metadata in response to a GetCapabilities request. 
             Specifically, every WFS must support the KVP encoded form of the GetCapabilities request over HTTP GET in order to let 
             a client know how to obtain a capabilities document.</para>
             <para>
             The capabilities response document contains the following sections:
            1. Service Identification section
            The service identification section provides information about the WFS service itself.
            2. Service Provider section
            The service provider section provides metadata about the organization operating the WFS server.
            3. Operation Metadata section
            The operations metadata section provides metadata about the operations defined in this specification and implemented by a particular WFS server. This metadata includes the DCP, parameters and constraints for each operation.
            4. FeatureType list section
            This section defines the list of feature types (and operations on each feature type) that are available from a web feature service. Additional information, such as the default SRS, any other supported SRSs, or no SRS whatsoever (for non-spatial feature types), for WFS requests is provided for each feature type.
            5. ServesGMLObjectType list section
            This section defines the list of GML Object types, not derived from gml:AbstractFeatureType, that are available from a web feature service that supports the GetGMLObject operation. These types may be defined in a base GML schema, or in an application schema using its own namespace.
            6. SupportsGMLObjectType list section
            The Supports GML Object Type section defines the list of GML Object types that a WFS server would be capable of serving if it was deployed to serve data.
            described by an application schema that either used those GML Object types directly (for non-abstract types), or defined derived types based on those types.
            7. Filter capabilities section
            The schema of the Filter Capabilities Section is defined in the Filter Encoding Implementation Specification [3]. This is an optional section. If it exists, then the WFS should support the operations advertised therein. If the Filter Capabilities Section is not defined, then the client should assume that the server only supports the minimum default set of filter operators.
             </para>
             </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSourceHelper.GetCapabilities(System.Uri,System.Net.WebProxy)">
             <summary>Get capabilities from a WFS service url.</summary>
             <returns>XML representing capabilities of the WFS server.</returns>
             <param name="serverUri">Url of the WFS service.</param>
             <param name="webProxy">Proxy of the WFS service.</param>
             <remarks><para>Every OGC Web Service, including a Web Feature Service, has the ability to describe its capabilities 
             by returning service metadata in response to a GetCapabilities request. 
             Specifically, every WFS must support the KVP encoded form of the GetCapabilities request over HTTP GET in order to let 
             a client know how to obtain a capabilities document.</para>
             <para>
             The capabilities response document contains the following sections:
            1. Service Identification section
            The service identification section provides information about the WFS service itself.
            2. Service Provider section
            The service provider section provides metadata about the organization operating the WFS server.
            3. Operation Metadata section
            The operations metadata section provides metadata about the operations defined in this specification and implemented by a particular WFS server. This metadata includes the DCP, parameters and constraints for each operation.
            4. FeatureType list section
            This section defines the list of feature types (and operations on each feature type) that are available from a web feature service. Additional information, such as the default SRS, any other supported SRSs, or no SRS whatsoever (for non-spatial feature types), for WFS requests is provided for each feature type.
            5. ServesGMLObjectType list section
            This section defines the list of GML Object types, not derived from gml:AbstractFeatureType, that are available from a web feature service that supports the GetGMLObject operation. These types may be defined in a base GML schema, or in an application schema using its own namespace.
            6. SupportsGMLObjectType list section
            The Supports GML Object Type section defines the list of GML Object types that a WFS server would be capable of serving if it was deployed to serve data.
            described by an application schema that either used those GML Object types directly (for non-abstract types), or defined derived types based on those types.
            7. Filter capabilities section
            The schema of the Filter Capabilities Section is defined in the Filter Encoding Implementation Specification [3]. This is an optional section. If it exists, then the WFS should support the operations advertised therein. If the Filter Capabilities Section is not defined, then the client should assume that the server only supports the minimum default set of filter operators.
             </para>
             </remarks>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSourceHelper.GetLayers(System.String)">
            <summary>Gets layer names from a WFS service url.</summary>
            <param name="serviceLocationUrl">Url of the WFS service.</param>
            <returns>Collection of layer names.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSourceHelper.GetLayers(System.Uri)">
            <summary>Gets layer names from a WFS service url.</summary>
            <param name="serverUri">Url of the WFS service.</param>
            <returns>Collection of layer names.</returns>
        </member>
        <member name="M:Mapgenix.FeatureSource.WfsFeatureSourceHelper.GetLayers(System.Uri,System.Net.WebProxy)">
            <summary>Gets layer names from a WFS service url.</summary>
            <param name="serverUri">Url of the WFS service.</param>
            <param name="webProxy">Proxy of the WFS service.</param>
            <returns>Collection of layer names.</returns>
        </member>
    </members>
</doc>
